using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Threading;
using QuickFix;
using NestDLL;
using System.IO;

namespace NFIXConnLT
{
    /// <summary>
    /// FIX interface to send the orders generated by strategies
    /// </summary>
    public class FIXConnLT : MessageCracker, QuickFix.Application, IDisposable
    {
        private SessionSettings _settings;
        private FileStoreFactory _store;
        private FileLogFactory _logs;
        private MessageFactory _messages;
        private SocketInitiator _initiator;
        private string _QFConfig;
        private SessionID _ID_Session = null;
        public int ordID = 0;

        public event EventHandler OnOrderUpdate;
        public event EventHandler ReceivedUpdate;
        public event EventHandler OnReject;

        public System.Diagnostics.Stopwatch MasterClock = new System.Diagnostics.Stopwatch();

        private string curLogFilePath = "";

        public LimitControl curLimits = new LimitControl();

        private bool _IsAliveSession = false; public bool IsAliveSession { get { return _IsAliveSession; } }
        
        private int _ReplacesSent; public int ReplacesSent { get { return _ReplacesSent; } }
        private int _FillsReceived; public int FillsReceived { get { return _FillsReceived; } }
        private string _OrderPrefix = ""; public string OrderPrefix { get { return _OrderPrefix; } }

        private Dictionary<string, string> curOrderToOrigID = new Dictionary<string, string>();
        private Dictionary<string, OrderLT> OrderContainer = new Dictionary<string, OrderLT>();
        private Dictionary<string, ExecLT> ExecContainer = new Dictionary<string, ExecLT>();

        private Mutex MutexOrderContainer = new Mutex();
        private Mutex MutexExecContainer = new Mutex();

        public List<OrderLT> OrderList
        {
            get
            {

                MutexOrderContainer.WaitOne();

                List<OrderLT> ReturnOrders = new List<OrderLT> ();
                foreach (OrderLT curOrder in OrderContainer.Values)
                {
                    ReturnOrders.Add(curOrder);
                }

                MutexOrderContainer.ReleaseMutex();
                return ReturnOrders;
            }
        }

        public List<ExecLT> ExecList
        {
            get
            {

                MutexExecContainer.WaitOne();

                List<ExecLT> ReturnExecs = new List<ExecLT>();
                foreach (ExecLT curExec in ExecContainer.Values)
                {
                    ReturnExecs.Add(curExec);
                }

                MutexExecContainer.ReleaseMutex();
                return ReturnExecs;
            }
        }

        #region Properties

        /// <summary>
        /// Full path to QuickFix configuration File
        /// </summary>
        public string QFConfig
        {
            get
            {
                return _QFConfig;
            }
        }

        /// <summary>
        /// Unique session identifier
        /// </summary>
        public QuickFix.SessionID ID_Session
        {
            get
            {
                return _ID_Session;
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Create instance of FIX class
        /// </summary>
        /// <param name="_qfConfig">QuickFix configuration file full path</param>
        public FIXConnLT(string _qfConfig)
        {
            MasterClock.Start();

            long curFrequency = System.Diagnostics.Stopwatch.Frequency;
            bool curIsHighResolution = System.Diagnostics.Stopwatch.IsHighResolution;

            string tempPath = (_qfConfig).Substring(0, (_qfConfig).LastIndexOf('\\') -1);
            string tempPath2 = (tempPath).Substring(0, (tempPath).LastIndexOf('\\') + 1);

            curLogFilePath = tempPath2 + @"log\" + DateTime.Now.ToString("yyyy-MM-dd") + "";

            _QFConfig = _qfConfig;

            _settings = new SessionSettings(QFConfig);

            LoadOrdersFromLog();

            try
            {
                _store = new FileStoreFactory(_settings);
                _logs = new FileLogFactory(curLogFilePath);
                _messages = new DefaultMessageFactory();
                _initiator = new SocketInitiator(this, _store, _settings, _logs, _messages);
                _initiator.start();
            }
            catch (Exception e)
            {
                throw new Exception("Unable to create instance of class FIX", e);
            }//catch

            getLastOrdID();

        }//FIX

        #endregion

        private void LoadOrdersFromLog()
        {
            string tempSessionName = _settings.getSessions()[0].ToString();

            string tempSessionID = tempSessionName;//.Substring(0, tempSessionName.IndexOf('>') - 1).Split(':')[1];

            string curFileName = curLogFilePath + "\\" + tempSessionID.Replace(">", "").Replace(":", "-") + ".messages.log";

            //string curFileName = @"C:\FIXLOG\Phyton2\log\2012-02-16\FIX.4.2-NESTQ2-XPBOV.messages.log";

            if (File.Exists(curFileName))
            {

                StreamReader sr = new StreamReader(curFileName);

                string tempLine = "";

                while ((tempLine = sr.ReadLine()) != null)
                {
                    if (tempLine.Contains("35=D"))
                    {

                        ClOrdID curClOrdID = new ClOrdID(FIXTagGetValue(tempLine, 11));
                        Symbol curSymbol = new Symbol(FIXTagGetValue(tempLine, 55));
                        Side curSide = new Side(FIXTagGetValue(tempLine, 54)[0]);
                        OrderQty curOrderQty = new OrderQty(int.Parse(FIXTagGetValue(tempLine, 38)));
                        Price curPrice;

                        if(FIXTagGetValue(tempLine, 44) != "")
                            curPrice = new Price(double.Parse(FIXTagGetValue(tempLine, 44)));
                        else
                            curPrice = new Price(0);

                        OrderLT curOrder = new OrderLT(curClOrdID, getIdSecurity(curSymbol.getValue()), curSymbol, curSide, curOrderQty, curPrice);
                        curOrder.SentTime = DateTime.Parse(FIXTagGetValue(tempLine, 52).Split('-')[1]).TimeOfDay.Subtract(new TimeSpan(2, 0, 0));
                        curOrder.Account = new Account(FIXTagGetValue(tempLine, 1)); ;
                        curOrder.ExecBroker = new ExecBroker(FIXTagGetValue(tempLine, 76));

                        if (OrderContainer.ContainsKey(curClOrdID.getValue()))
                        {
                            if (!tempLine.Contains("43=Y"))
                            {
                                OrderContainer.Add(curClOrdID.getValue(), curOrder);
                            }
                        }
                        else
                        {
                            OrderContainer.Add(curClOrdID.getValue(), curOrder);
                        }
                    }

                    if (tempLine.Contains("35=8"))
                    {
                        string curClOrdID;
                        string origClOrdID;
                        string tempClOrdID;

                        curClOrdID = FIXTagGetValue(tempLine, 11);
                        origClOrdID = FIXTagGetValue(tempLine, 41);

                        if (tempLine.Contains("39=5"))
                        {
                            _ReplacesSent++;
                        }

                        if (tempLine.Contains("39=2"))
                        {
                            curOrderToOrigID.TryGetValue(curClOrdID, out origClOrdID);

                            _FillsReceived++;
                        }
                        else
                        {
                            if (curOrderToOrigID.TryGetValue(origClOrdID, out tempClOrdID))
                            {
                                curOrderToOrigID.Remove(origClOrdID);
                                origClOrdID = tempClOrdID;
                                curOrderToOrigID.Add(curClOrdID, origClOrdID);
                            }
                            else
                            {
                                if (origClOrdID == "")
                                {
                                    origClOrdID = curClOrdID;
                                }
                                if (!curOrderToOrigID.ContainsKey(curClOrdID))
                                {
                                    curOrderToOrigID.Add(curClOrdID, curClOrdID);
                                }
                            }
                        }

                        if (origClOrdID == null) origClOrdID = curClOrdID;

                        OrderLT curOrder;

                        if(OrderContainer.TryGetValue(origClOrdID, out curOrder))
                        {
                            curOrder.Symbol = new Symbol(FIXTagGetValue(tempLine, 55));
                            curOrder.Side = new Side(FIXTagGetValue(tempLine, 54)[0]);
                            if(FIXTagGetValue(tempLine, 38) != "") curOrder.OrderQty = new OrderQty(int.Parse(FIXTagGetValue(tempLine, 38)));

                            Price curPrice;

                            if (FIXTagGetValue(tempLine, 44) != "")
                                curPrice = new Price(double.Parse(FIXTagGetValue(tempLine, 44).Replace(".", ",")));
                            else
                                curPrice = new Price(0);

                            curOrder.Price = curPrice;
                            curOrder.ExecPrice = double.Parse(FIXTagGetValue(tempLine, 6).Replace(".", ","));
                            curOrder.Status = new OrdStatus(FIXTagGetValue(tempLine, 39)[0]);
                            curOrder.Done = double.Parse(FIXTagGetValue(tempLine, 14));
                            curOrder.Leaves = double.Parse(FIXTagGetValue(tempLine, 151));
                            curOrder.ClOrdID = new ClOrdID(curClOrdID);
                            curOrder.BrokerOrderID = FIXTagGetValue(tempLine, 37);
                        }

                        string curExecID = FIXTagGetValue(tempLine, 37);

                        if (!ExecContainer.ContainsKey(curExecID))
                        {
                            if (FIXTagGetValue(tempLine, 32) != "")
                            {
                                ExecLT curExecLT = new ExecLT();
                                curExecLT.ExecID = curExecID;
                                curExecLT.OrderID = new ClOrdID(origClOrdID);
                                curExecLT.LastShares = double.Parse(FIXTagGetValue(tempLine, 32));
                                curExecLT.LastPrice = double.Parse(FIXTagGetValue(tempLine, 32));
                                curExecLT.Inserted = false;

                                ExecContainer.Add(curExecID, curExecLT);
                            }
                        }
                    }
                }

                sr.Close();
            }

            UpdateOrderExecInsertedStatus();
        }

        public void UpdateOrderDatabaseID(string origOrderID, int DatabaseID)
        {
            OrderContainer[origOrderID].DatabaseID = DatabaseID;
            OrderContainer[origOrderID].Inserted = true;
        }

        public void UpdateExecDatabaseID(string ExecID, int DatabaseID)
        {
            ExecContainer[ExecID].DatabaseID = DatabaseID;
            ExecContainer[ExecID].Inserted = true;
        }

        private void UpdateOrderExecInsertedStatus()
        {
            using (newNestConn curConn = new newNestConn())
            {
                foreach (OrderLT curOrder in OrderList)
                {
                    string tempIdOrder = curConn.Execute_Query_String("SELECT Id_Ordem FROM NESTDB.dbo.Tb012_Ordens WHERE Id_Order_Broker='" + curOrder.OrigClOrdID.getValue() + "' AND Status_Ordem<>4");
                    if (tempIdOrder != "") curOrder.Inserted = true;
                }
                foreach (ExecLT curExec in ExecList)
                {
                    string tempIdExec = curConn.Execute_Query_String("SELECT Id_Trade FROM NESTDB.dbo.Tb013_Trades WHERE ExecID='" + curExec.ExecID + "' AND StatusTrade<>4");
                    if (tempIdExec != "") curExec.Inserted = true;
                }
            }
        }

        #region Send Messages

        private string FIXTagGetValue(string tempLine, int FIXField)
        {
            string[] curRow = tempLine.Split('');

            foreach (string curString in curRow)
            {
                if (curString != "")
                {
                    string[] tempParts = curString.Split('=');
                    if (int.Parse(tempParts[0]) == FIXField) return tempParts[1];
                }
            }

            return "";
        }

        public void resendAllStatus()
        { 
            foreach(OrderLT curOrder in OrderContainer.Values)
            {
                ReportUpdate(curOrder.OrigClOrdID.getValue());
            }
        }


        public string sendOrder(int IdAccount, int IdSecurity, int curQuantity, double curPrice, int curMaxFloor, int IdPortfolio, int IdBook, int IdSection, ExecBroker _ExecBroker)
        {
            OrdType _ordType = new OrdType();
            Side curSide = new Side();

            curSide = new Side((curQuantity >= 0 ? Side.BUY : Side.SELL));

            if (curPrice > 0)
            {
                _ordType.setValue(OrdType.LIMIT);
            }
            else if (curPrice == -1)
            {
                _ordType.setValue(OrdType.MARKET);
            }
            else if (curPrice == -2)
            {
                _ordType = new OrdType(OrdType.ON_CLOSE);
            }

            string result = sendOrder(IdAccount, nextClOrderID(), IdSecurity, curSide, curQuantity, curPrice, _ordType, IdPortfolio, IdBook, IdSection, "", _ExecBroker, new MaxFloor(curMaxFloor));

            return result;
        }

        public string sendOrder(int IdAccount, string OrderID, int IdSecurity, Side curSide, int Qty, double curPrice, OrdType curOrdType, int IdPortfolio, int IdBook, int IdSection, string extension, ExecBroker curExecBroker, MaxFloor curMaxFloor)
        {
            HandlInst _handlInst = new HandlInst(HandlInst.AUTOMATED_EXECUTION_ORDER_PRIVATE);

            string symbol = getSymbol(IdSecurity).Split('.')[0];

            if (extension != "")
            {
                symbol = symbol + "." + extension;
            }

            Symbol _symbol = new Symbol(symbol);
            TransactTime _tTime = new TransactTime(DateTime.Now);
            OrderQty curOrderQty = new OrderQty((double)(Math.Abs(Qty)));
            ClOrdID _clOrdId = new ClOrdID(nextClOrderID());

            QuickFix42.NewOrderSingle orderSingle = new QuickFix42.NewOrderSingle(_clOrdId, _handlInst, _symbol, curSide, _tTime, curOrdType);

            orderSingle.setInt(1, IdAccount);
            orderSingle.set(curMaxFloor);
            orderSingle.set(curExecBroker);
            orderSingle.set(curOrderQty);
            orderSingle.set(curOrdType);

            if (curOrdType == new OrdType(OrdType.LIMIT) || curOrdType == new OrdType(OrdType.LIMIT_ON_CLOSE) || curOrdType == new OrdType(OrdType.STOP) || curOrdType == new OrdType(OrdType.STOP_LIMIT))
            {
                orderSingle.set(new Price(curPrice));
            }


            //orderSingle.getHeader().setField(50, "FD");

            OrderLT newOrd = new OrderLT(_clOrdId, IdSecurity, _symbol, curSide, curOrderQty, new Price(curPrice));
            newOrd.SentTime = DateTime.Now.TimeOfDay;
            newOrd.SentTick = MasterClock.ElapsedMilliseconds;
            newOrd.Account = new Account(IdAccount.ToString());
            newOrd.ExecBroker = curExecBroker;
            newOrd.IdPortfolio = IdPortfolio;
            newOrd.IdBook = IdBook;
            newOrd.IdSection = IdSection;
            newOrd.DisplayShares = (int)curMaxFloor.getValue();

            MutexOrderContainer.WaitOne();
            OrderContainer.Add(_clOrdId.getValue(), newOrd);
            MutexOrderContainer.ReleaseMutex();

            curOrderToOrigID.Add(_clOrdId.getValue(), _clOrdId.getValue());

            if (curLimits.CanSend() && curLimits.OrderSizeOK(curOrderQty.getValue(), curPrice))
            {
                curLimits.SentGross += Math.Abs(curOrderQty.getValue() * curPrice);
                if (curSide.getValue() == Side.BUY) curLimits.SentNet += curOrderQty.getValue() * curPrice;
                if (curSide.getValue() == Side.SELL || curSide.getValue() == Side.SELL_SHORT) curLimits.SentNet += -curOrderQty.getValue() * curPrice;
                curLimits.SentShares += Math.Abs(curOrderQty.getValue());

                Session.sendToTarget(orderSingle, ID_Session);
            }
            else
            {
                OrderContainer[_clOrdId.getValue()].Status = new OrdStatus(OrdStatus.SUSPENDED);
            }

            OnOrderUpdate(this, new OrderEventArgs(_symbol.getValue()));

            return _clOrdId.getValue();
        }

        public string replaceOrder(string clOrdID, double newPrice, double newQuantity, int newDisplayShares)//, OrdType newOrdType)
        {
            string _clOrdId = "";

            if (OrderContainer.ContainsKey(clOrdID))
            {
                HandlInst _handlInst = new HandlInst(HandlInst.AUTOMATED_EXECUTION_ORDER_PRIVATE);
                OrdType curOrdType = new OrdType();
                Price _newPrice = new Price();

                if (newPrice > 0)
                {
                    curOrdType.setValue(OrdType.LIMIT);
                }
                else if (newPrice == -1)
                {
                    curOrdType.setValue(OrdType.MARKET);
                }
                else if (newPrice == -2)
                {
                    curOrdType = new OrdType(OrdType.ON_CLOSE);
                }

                _clOrdId = nextClOrderID();

                QuickFix42.OrderCancelReplaceRequest ReplaceRequest = new QuickFix42.OrderCancelReplaceRequest(new OrigClOrdID(OrderContainer[clOrdID].ClOrdID.getValue()),
                                                                                            new ClOrdID(_clOrdId),
                                                                                            _handlInst,
                                                                                            OrderContainer[clOrdID].Symbol,
                                                                                            OrderContainer[clOrdID].Side,
                                                                                            new TransactTime(DateTime.Now),
                                                                                            curOrdType);

                if (curOrdType == new OrdType(OrdType.LIMIT) || curOrdType == new OrdType(OrdType.LIMIT_ON_CLOSE) || curOrdType == new OrdType(OrdType.STOP) || curOrdType == new OrdType(OrdType.STOP_LIMIT))
                {
                    ReplaceRequest.set(new Price(newPrice));
                }

                OrderQty _newOrderQty;
                _newOrderQty = new OrderQty(newQuantity);
                ReplaceRequest.set(_newOrderQty);

                int curDisplayShares = 0;

                curDisplayShares = OrderContainer[clOrdID].DisplayShares;
                if (curDisplayShares > OrderContainer[clOrdID].Leaves) curDisplayShares = (int)OrderContainer[clOrdID].Leaves;

                ReplaceRequest.setInt(111, curDisplayShares);

                ReplaceRequest.setField(OrderContainer[clOrdID].Account);
                ReplaceRequest.setField(OrderContainer[clOrdID].ExecBroker);

                ReplaceRequest.removeField(38);

                Session.sendToTarget(ReplaceRequest, ID_Session);
                _ReplacesSent++;
            }

            return _clOrdId;
        }

        //public string replaceOrderQuantity(string clOrdID, double newQuantity)
        //{
        //    string _clOrdId = "";

        //    if (OrderContainer.ContainsKey(clOrdID))
        //    {
        //        HandlInst _handlInst = new HandlInst(HandlInst.AUTOMATED_EXECUTION_ORDER_PRIVATE);
        //        OrdType _ordType = new OrdType();
                
        //        if (OrderContainer[clOrdID].Price.getValue() > 0)
        //        {
        //            _ordType.setValue(OrdType.LIMIT);
        //        }
        //        else
        //        {
        //            _ordType.setValue(OrdType.MARKET);
        //        }

        //        _clOrdId = nextClOrderID();
                
        //        QuickFix42.OrderCancelReplaceRequest ReplaceRequest = new QuickFix42.OrderCancelReplaceRequest(new OrigClOrdID(OrderContainer[clOrdID].ClOrdID.getValue()),
        //                                                                                    new ClOrdID(_clOrdId),
        //                                                                                    _handlInst,
        //                                                                                    OrderContainer[clOrdID].Symbol,
        //                                                                                    OrderContainer[clOrdID].Side,
        //                                                                                    new TransactTime(DateTime.Now),
        //                                                                                    _ordType);

        //        OrderQty _newOrderQty;
        //        _newOrderQty = new OrderQty(newQuantity);

        //        ReplaceRequest.setField(OrderContainer[clOrdID].Account);
        //        ReplaceRequest.setField(OrderContainer[clOrdID].ExecBroker);
        //        ReplaceRequest.set(_newOrderQty);

        //        int curDisplayShares = OrderContainer[clOrdID].DisplayShares;
        //        if (curDisplayShares > OrderContainer[clOrdID].Leaves) curDisplayShares = (int)OrderContainer[clOrdID].Leaves;
        //        ReplaceRequest.setInt(111, curDisplayShares);

        //        Session.sendToTarget(ReplaceRequest, ID_Session);
        //        _ReplacesSent++;
        //    }

        //    return _clOrdId;
        //}

        //public string replaceOrderPriceAndQuantity(string clOrdID, double newPrice, double newQuantity)
        //{
        //    string _clOrdId = "";

        //    if (OrderContainer.ContainsKey(clOrdID))
        //    {
        //        HandlInst _handlInst = new HandlInst(HandlInst.AUTOMATED_EXECUTION_ORDER_PRIVATE);
        //        OrdType _ordType = new OrdType();
        //        Price _newPrice = new Price();

        //        if (newPrice > 0)
        //        {
        //            _ordType.setValue(OrdType.LIMIT);
        //        }
        //        else
        //        {
        //            _ordType.setValue(OrdType.MARKET);
        //        }

        //        _clOrdId = nextClOrderID();

        //        QuickFix42.OrderCancelReplaceRequest ReplaceRequest = new QuickFix42.OrderCancelReplaceRequest(new OrigClOrdID(OrderContainer[clOrdID].ClOrdID.getValue()),
        //                                                                                    new ClOrdID(_clOrdId),
        //                                                                                    _handlInst,
        //                                                                                    OrderContainer[clOrdID].Symbol,
        //                                                                                    OrderContainer[clOrdID].Side,
        //                                                                                    new TransactTime(DateTime.Now),
        //                                                                                    _ordType);

        //        if (newPrice > 0)
        //        {
        //            _newPrice.setValue(newPrice);
        //            ReplaceRequest.set(_newPrice);
        //        }

        //        OrderQty _newOrderQty;
        //        _newOrderQty = new OrderQty(newQuantity);
        //        ReplaceRequest.set(_newOrderQty);

        //        ReplaceRequest.setField(OrderContainer[clOrdID].Account);
        //        ReplaceRequest.setField(OrderContainer[clOrdID].ExecBroker);

        //        int curDisplayShares = OrderContainer[clOrdID].DisplayShares;
        //        if (curDisplayShares > OrderContainer[clOrdID].Leaves) curDisplayShares = (int)OrderContainer[clOrdID].Leaves;
        //        ReplaceRequest.setInt(111, curDisplayShares);

        //        //ReplaceRequest.set(OrderContainer[clOrdID].OrderQty);
        //        Session.sendToTarget(ReplaceRequest, ID_Session);
        //        _ReplacesSent++;
        //    }

        //    return _clOrdId;
        //}

        private string getSymbol(int IdSecurity)
        {
            string SQLExpresion = "SELECT EXCHANGETICKER FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE IDSECURITY = " + IdSecurity.ToString();

            string result = "";

            using (newNestConn conn = new newNestConn())
            {
                if ((result = conn.Execute_Query_String(SQLExpresion)) == "")
                {
                    throw new System.NotImplementedException();
                }
            }

            return result;
        }

        private int getIdSecurity(string Ticker)
        {
            string SQLExpresion = "SELECT IDSECURITY FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE EXCHANGETICKER = '" + Ticker + "'";

            int result = 0;

            using (newNestConn conn = new newNestConn())
            {
                result = conn.Return_Int(SQLExpresion);
            }

            return result;
        }

        public void cancelAllOrders()
        {
            MutexOrderContainer.WaitOne();
            foreach (OrderLT ord in OrderContainer.Values)
            {
                if (ord.Status.ToString() != new OrdStatus(OrdStatus.FILLED).ToString() && ord.Status.ToString() != new OrdStatus(OrdStatus.SUSPENDED).ToString())
                {
                    cancelOrder(ord.OrigClOrdID.getValue());
                }
            }
            MutexOrderContainer.ReleaseMutex();
        }

        public void cancelAllOrders(int IdSecurity)
        {
            MutexOrderContainer.WaitOne();
            foreach (OrderLT ord in OrderContainer.Values)
            {
                if (ord.IdSecurity == IdSecurity)
                {
                    if (ord.Status.ToString() != new OrdStatus(OrdStatus.FILLED).ToString() && ord.Status.ToString() != new OrdStatus(OrdStatus.SUSPENDED).ToString())
                    {
                        cancelOrder(ord.OrigClOrdID.getValue());
                    }
                }
            }
            MutexOrderContainer.ReleaseMutex();
        }

        public bool cancelOrder(string OrigClOrdID)
        {
            bool result = false;

            if (OrderContainer.ContainsKey(OrigClOrdID))
            {
                QuickFix42.OrderCancelRequest CancelRequest = new QuickFix42.OrderCancelRequest(new OrigClOrdID(OrderContainer[OrigClOrdID].ClOrdID.getValue()),
                                                                                            new ClOrdID(nextClOrderID()),
                                                                                            OrderContainer[OrigClOrdID].Symbol,
                                                                                            OrderContainer[OrigClOrdID].Side,
                                                                                            new TransactTime(DateTime.Now));

                CancelRequest.set(OrderContainer[OrigClOrdID].OrderQty);
                CancelRequest.setField(OrderContainer[OrigClOrdID].Account);
                CancelRequest.setField(OrderContainer[OrigClOrdID].ExecBroker);

                Session.sendToTarget(CancelRequest, ID_Session);

                result = true;
            }

            return result;
        }

        private string nextClOrderID()
        {
            return _OrderPrefix + getNextOrdID().ToString("000000");
        }

        private void getLastOrdID()
        {
            if (DateTime.Today.Equals(NFIXConn.Properties.Settings.Default.LastClOrdIDDate))
            {
                ordID = NFIXConn.Properties.Settings.Default.LastClOrdID;
            }
            else
            {
                NFIXConn.Properties.Settings.Default.LastClOrdIDDate = DateTime.Today;
                ordID = 0;
                NFIXConn.Properties.Settings.Default.LastClOrdID = ordID;
                NFIXConn.Properties.Settings.Default.Save();
            }
        }

        private int getNextOrdID()
        {
            int thisOrdId = 0;
            if (DateTime.Today.Equals(NFIXConn.Properties.Settings.Default.LastClOrdIDDate))
            {
                thisOrdId = ordID++;
                NFIXConn.Properties.Settings.Default.LastClOrdID = ordID;
                NFIXConn.Properties.Settings.Default.Save();
            }
            else
            {
                NFIXConn.Properties.Settings.Default.LastClOrdIDDate = DateTime.Today;
                ordID = 1;
                thisOrdId = 1;
                NFIXConn.Properties.Settings.Default.LastClOrdID = ordID;
                NFIXConn.Properties.Settings.Default.Save();
            }

            return thisOrdId;
        }

        #endregion

        #region Receive Messages

        public override void onMessage(QuickFix42.ExecutionReport message, SessionID session)
        {
            UpdateOrder(message, session);
        }

        private void UpdateOrder(QuickFix42.ExecutionReport message, SessionID session)
        {
            OrigClOrdID origID = new OrigClOrdID();

            string curClOrdID = "";
            string receivedOrigClOrdID = "";
            string tempClOrdID = "";
            string validClOrdID = "";

            curClOrdID = message.getClOrdID().getValue();
            if (message.isSet(origID))
            {
                receivedOrigClOrdID = message.getOrigClOrdID().getValue();
            }
            else
            {
                if (message.getExecType().getValue() == ExecType.CANCELED)
                {
                    receivedOrigClOrdID = curClOrdID;
                }
            }

            if (message.getExecType().getValue() == ExecType.NEW)
            {
                //curOrderToOrigID.Add(curClOrdID, curClOrdID);
                validClOrdID = curClOrdID;
            }
            else if (message.getExecType().getValue() == ExecType.FILL || message.getExecType().getValue() == ExecType.PARTIAL_FILL || message.getExecType().getValue() == ExecType.REJECTED)
            {
                curOrderToOrigID.TryGetValue(receivedOrigClOrdID, out validClOrdID);
                //validClOrdID = receivedOrigClOrdID;
                if (validClOrdID == "" || validClOrdID == null) validClOrdID = curClOrdID;
            }
            else
            {
                curOrderToOrigID.TryGetValue(receivedOrigClOrdID, out tempClOrdID);
                try
                {
                    curOrderToOrigID.Add(curClOrdID, tempClOrdID);
                }
                catch
                {
                    Console.WriteLine("================================ DUPLICATE REPORT FOR ORDER ===================================");
                    Console.WriteLine("Order Id: " + curClOrdID + " - tempID: " + tempClOrdID + " - RecOriginalID: " + receivedOrigClOrdID);
                }
                validClOrdID = tempClOrdID;
            }

            if ((message.getExecType().getValue() == ExecType.FILL || message.getExecType().getValue() == ExecType.PARTIAL_FILL))
            {
                _FillsReceived++;
            }

            Price curPrice = new Price(0);

            if(message.isSetPrice())
            {
                curPrice = message.getPrice();
            }

            MutexOrderContainer.WaitOne();

            if (OrderContainer.ContainsKey(validClOrdID))
            {
                OrderContainer[validClOrdID].ChangeStatus(message.getOrdStatus());

                if (OrderContainer[validClOrdID].Status.getValue() == OrdStatus.NEW || OrderContainer[validClOrdID].Status.getValue() == OrdStatus.REJECTED)
                {
                    if(OrderContainer[validClOrdID].TimeToAck==0) OrderContainer[validClOrdID].TimeToAck = MasterClock.ElapsedMilliseconds-OrderContainer[validClOrdID].SentTick;
                }

                OrderContainer[validClOrdID].ClOrdID = new ClOrdID(curClOrdID);
                OrderContainer[validClOrdID].Price = curPrice;
                OrderContainer[validClOrdID].Done = message.getCumQty().getValue();
                OrderContainer[validClOrdID].Leaves = message.getLeavesQty().getValue();
                OrderContainer[validClOrdID].ExecPrice = message.getAvgPx().getValue();
                OrderContainer[validClOrdID].BrokerOrderID = message.getOrderID().getValue();
                OrderContainer[validClOrdID].Updated = true;

                ReportUpdate(validClOrdID);

                if ((message.getExecType().getValue() == ExecType.FILL || message.getExecType().getValue() == ExecType.PARTIAL_FILL))
                {

                    MutexExecContainer.WaitOne();

                    if (ExecContainer.ContainsKey(message.getExecID().getValue()))
                    {

                    }
                    else
                    {
                        ExecLT curExecLT = new ExecLT();
                        curExecLT.ExecID = message.getExecID().getValue();
                        curExecLT.OrderID = new ClOrdID(validClOrdID);
                        curExecLT.LastShares = message.getLastShares().getValue();
                        curExecLT.LastPrice = message.getLastPx().getValue();
                        curExecLT.Inserted = false;

                        ExecContainer.Add(message.getExecID().getValue(), curExecLT);
                    }

                    MutexExecContainer.ReleaseMutex();
                }
            }
            else
            {
                Console.WriteLine("============= FIX ORDER NOT FOUND ==============");
                Console.WriteLine("validClOrdID  " + validClOrdID);
                Console.WriteLine("============= FIX ORDER NOT FOUND ==============");
                Console.WriteLine("curClOrdID  " + curClOrdID);
                Console.WriteLine("receivedOrigClOrdID  " + receivedOrigClOrdID);
            }

            MutexOrderContainer.ReleaseMutex();

            if (OnReject != null && message.getExecType().getValue() == ExecType.REJECTED)
            {
                double rejPrice = 0;
                if (message.isSetPrice()) rejPrice = message.getPrice().getValue();

                OnReject(this, new RejectEventArgs(curClOrdID, message.getSymbol().ToString(), rejPrice, message.getText().ToString()));
            }

            if (OnOrderUpdate != null)
            {
                OnOrderUpdate(this, new OrderEventArgs(message.getSymbol().ToString()));
            }
        }

        private void ReportUpdate(string origClOrdID)
        {
            if (ReceivedUpdate != null)
            {
                NCommonTypes.FIXOrder UpdateOrderArgs = new NCommonTypes.FIXOrder(OrderContainer[origClOrdID].IdSecurity, 
                                                                                OrderContainer[origClOrdID].Symbol.getValue(),
                                                                                OrderContainer[origClOrdID].strSide,
                                                                                (int)OrderContainer[origClOrdID].OrderQty.getValue(),
                                                                                OrderContainer[origClOrdID].Price.getValue()
                                                                                );

                UpdateOrderArgs.ClOrdID = OrderContainer[origClOrdID].ClOrdID.getValue();
                UpdateOrderArgs.OrigClOrdID = OrderContainer[origClOrdID].OrigClOrdID.getValue();

                UpdateOrderArgs.strStatus = OrderContainer[origClOrdID].strStatus;

                UpdateOrderArgs.Done = (int)OrderContainer[origClOrdID].Done;
                UpdateOrderArgs.Cancelled = 0;

                UpdateOrderArgs.ExecPrice = OrderContainer[origClOrdID].ExecPrice;

                ReceivedUpdate(this, UpdateOrderArgs);
            }
        }

        public override void onMessage(QuickFix42.OrderCancelReject message, SessionID session)
        {
            OrigClOrdID origID = new OrigClOrdID();
            string prevClOrdID = "";

            if (message.isSet(origID))
            {
                prevClOrdID = message.getOrigClOrdID().getValue();
            }
            else
            {
                prevClOrdID = message.getClOrdID().getValue();
            }

            string clOrdID = "";
            clOrdID = message.getClOrdID().getValue();

            string origClOrdID = "";

            curOrderToOrigID.TryGetValue(prevClOrdID, out origClOrdID);

            MutexOrderContainer.WaitOne();
            if (OrderContainer.ContainsKey(origClOrdID))
            {
                if (ReceivedUpdate != null)
                {
                    NCommonTypes.FIXOrder UpdateOrderArgs = new NCommonTypes.FIXOrder(OrderContainer[origClOrdID].IdSecurity,
                                                                                    OrderContainer[origClOrdID].Symbol.getValue(),
                                                                                    OrderContainer[origClOrdID].strSide,
                                                                                    -1,
                                                                                    -1
                                                                                    );

                    UpdateOrderArgs.ClOrdID = OrderContainer[origClOrdID].ClOrdID.getValue();
                    UpdateOrderArgs.OrigClOrdID = OrderContainer[origClOrdID].OrigClOrdID.getValue();

                    UpdateOrderArgs.strStatus = OrderContainer[origClOrdID].strStatus;

                    UpdateOrderArgs.Done = (int)OrderContainer[origClOrdID].Done;
                    UpdateOrderArgs.Cancelled = 0;

                    UpdateOrderArgs.ExecPrice = OrderContainer[origClOrdID].ExecPrice;

                    OnOrderUpdate(this, new OrderEventArgs(OrderContainer[origClOrdID].Symbol.getValue().ToString()));
                    ReceivedUpdate(this, UpdateOrderArgs);
                }
            }
            MutexOrderContainer.ReleaseMutex();
        }

        #endregion

        #region QuickFix Events
        /// <summary>
        /// Called on FIX session creation
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onCreate(SessionID sessionID)
        {
            _ID_Session = sessionID;
        }

        /// <summary>
        /// Called on successful logon
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onLogon(SessionID sessionID)
        {
            _IsAliveSession = true;
            string curSenderId =sessionID.getSenderCompID();
            if (curSenderId.Length > 3)
            {
                _OrderPrefix = curSenderId.Substring(curSenderId.Length - 3, 3);
            }
            else
            {
                throw new System.NotImplementedException();
            }
        }

        /// <summary>
        /// Called when connection ends
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onLogout(SessionID sessionID)
        {
            _IsAliveSession = false;
        }

        /// <summary>
        /// Called before the application sends a session message
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void toAdmin(Message message, SessionID sessionID)
        {
        }

        /// <summary>
        /// Called when a session message is received
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void fromAdmin(Message message, SessionID sessionID)
        {
            crack(message, sessionID);
        }

        /// <summary>
        /// Called before the application sends an application message
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void toApp(Message message, SessionID sessionID)
        {
            //SenderSubID _senderSubId = new SenderSubID("UA");

            //if (!message.isSetField(_senderSubId)) { message.setField(_senderSubId); }
        }

        /// <summary>
        /// Called when an application message is received
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void fromApp(Message message, SessionID sessionID)
        {
            try
            {
                crack(message, sessionID);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                Console.WriteLine(message.ToXML());
            }
        }
        #endregion

        #region Disposable Region

        /// <summary>
        /// Disposes FIX class
        /// </summary>
        public void Dispose()
        {
            _initiator.stop();
        }//Dispose



        #endregion

    }//FixConn

    public class ExecLT
    {
        public ExecLT()
        { 
        }

        private string _ExecID; public string ExecID { get { return _ExecID; } set { _ExecID = value; } }
        private ClOrdID _curOrderID; public ClOrdID OrderID { get { return _curOrderID; } set { _curOrderID = value; } }
        private double _LastShares; public double LastShares { get { return _LastShares; } set { _LastShares = value; } }
        private double _LastPrice; public double LastPrice { get { return _LastPrice; } set { _LastPrice = value; } }

        private bool _Inserted; public bool Inserted { get { return _Inserted; } set { _Inserted = value; } }
        private int _DatabaseID = 0; public int DatabaseID { get { return _DatabaseID; } set { _DatabaseID = value; } }
    }

    public class OrderLT
    {
        private Account _Account;public Account Account { get { return _Account; } set { _Account = value; } }
        private OrigClOrdID _OrigClOrdID;public OrigClOrdID OrigClOrdID { get { return _OrigClOrdID; } }
        private ClOrdID _ClOrdID;public ClOrdID ClOrdID { get { return _ClOrdID; } set { _ClOrdID = value; } }
        private Symbol _Symbol;public Symbol Symbol { get { return _Symbol; } set { _Symbol = value; } }
        private Side _Side;public Side Side { get { return _Side; } set { _Side = value; } }
        private OrderQty _OrderQty;public OrderQty OrderQty { get { return _OrderQty; } set { _OrderQty = value; } }
        private OrdStatus _Status;public OrdStatus Status { get { return _Status; } set { _Status = value; } }
        private Price _Price;public Price Price { get { return _Price; } set { _Price = value; } }
        private int _IdSecurity;public int IdSecurity { get { return _IdSecurity; } }
        private double _Done;public double Done { get { return _Done; } set { _Done = value; } }
        private double _ExecPrice;public double ExecPrice { get { return _ExecPrice; } set { _ExecPrice = value; } }
        private double _Leaves;public double Leaves { get { return _Leaves; } set { _Leaves = value; } }
        private TimeSpan _SentTime;public TimeSpan SentTime { get { return _SentTime; } set { _SentTime = value; } }
        private double _TimeToAck;public double TimeToAck { get { return _TimeToAck; } set { _TimeToAck = value; } }
        private double _SentTick;public double SentTick { get { return _SentTick; } set { _SentTick = value; } }
        private ExecBroker _ExecBroker;public ExecBroker ExecBroker { get { return _ExecBroker; } set { _ExecBroker = value; } }
        private string _Fund = "";public string Fund { get { return _Fund; } set { _Fund = value; } }
        private string _BrokerOrderID = "";public string BrokerOrderID { get { return _BrokerOrderID; } set { _BrokerOrderID = value; } }
        private int _IdPortfolio = 0;public int IdPortfolio { get { return _IdPortfolio; } set { _IdPortfolio = value; } }
        private int _IdBook = 0;public int IdBook { get { return _IdBook; } set { _IdBook = value; } }
        private int _IdSection = 0;public int IdSection { get { return _IdSection; } set { _IdSection = value; } }
        private int _DisplayShares = 0;public int DisplayShares { get { return _DisplayShares; } set { _DisplayShares = value; } }

        private bool _Inserted = false; public bool Inserted { get { return _Inserted; } set { _Inserted = value; } }
        private int _DatabaseID = 0; public int DatabaseID { get { return _DatabaseID; } set { _DatabaseID = value; } }
        private bool _Updated = false; public bool Updated { get { return _Updated; } set { _Updated = value; } }

        public string strStatus { get { return ConvertStatus(_Status.getValue()); } }
        public string strSide { get { return ConvertSide(_Side.getValue()); } }
        public string strAccount { get { return _Account.getValue(); } }
        public double dblPrice { get { return _Price.getValue(); } }
        public double dblOrderQty { get { return _OrderQty.getValue(); } }

        public string strSymbol { get { return _Symbol.getValue(); } }
        public string strClOrdID { get { return _ClOrdID.getValue(); } }
        public string strOrigClOrdID { get { return _OrigClOrdID.getValue(); } }
        public double NetDone { get { return _Done * SideSignal(_Side.getValue()); } }
        public string strExecBroker { get { return ExecBroker.ToString(); } }
        public double Buy { get { if (_Done > 0)return _Done; else return 0; } }
        public double Sell { get { if (_Done < 0)return _Done; else return 0; } }
        public double BuyPrice { get { if (_Done > 0)return ExecPrice; else return 0; } }
        public double SellPrice { get { if (_Done < 0)return ExecPrice; else return 0; } }

        private CumQty _CumQty;

        public OrderLT(ClOrdID clOrdID, int IdSecurity, Symbol symbol, Side side, OrderQty orderQty, Price price)
        {
            _ClOrdID = clOrdID;
            _IdSecurity = IdSecurity;
            _Symbol = symbol;
            _Side = side;
            _OrderQty = orderQty;
            _Price = price;

            _OrigClOrdID = new OrigClOrdID(clOrdID.getValue());
            _CumQty = new CumQty(0);
            _Status = new OrdStatus(OrdStatus.PENDING_NEW);
        }
        
        public void FillOrder(OrigClOrdID clOrdId, LastShares lastShares, CumQty cumQty)
        {
            if (clOrdId.getValue() == OrigClOrdID.getValue())
            {
                _CumQty.setValue(_CumQty.getValue() + lastShares.getValue());
                if (_CumQty.getValue() != cumQty.getValue())
                {
                    Console.WriteLine("Last shares do not fill Order to the expected CumQty. Received: " + cumQty.ToString() + " Expected: " + _CumQty.ToString());
                }
            }
            else
            {
                throw new Exception("Incorrect ClOrdID on order fill. Received: " + clOrdId.ToString() + " Expected: " + ClOrdID.ToString());
            }
        }
        public void ChangeStatus(OrdStatus ordStatus)
        {
            Status = ordStatus;
        }

        private string ConvertStatus(char curStatus)
        {
            switch (curStatus)
            {
                case 'D': return "ACCEPTED_FOR_BIDDING"; break;
                case 'B': return "CALCULATED"; break;
                case '4': return "CANCELED"; break;
                case '3': return "DONE_FOR_DAY"; break;
                case 'C': return "EXPIRED"; break;
                case '2': return "FILLED"; break;
                case '0': return "NEW"; break;
                case '1': return "PARTIALLY_FILLED"; break;
                case '6': return "PENDING_CANCEL"; break;
                case 'A': return "PENDING_NEW"; break;
                case 'E': return "PENDING_REPLACE"; break;
                case '8': return "REJECTED"; break;
                case '5': return "REPLACED"; break;
                case '7': return "STOPPED"; break;
                case '9': return "SUSPENDED"; break;
                default: return "UNKNOWN";
            }
        }
        private string ConvertSide(char curSide)
        {
            switch (curSide)
            {
                case 'B': return "AS_DEFINED";
                case 'G': return "BORROW";
                case '1': return "BUY";
                case '3': return "BUY_MINUS";
                case '8': return "CROSS";
                case '9': return "CROSS_SHORT";
                case 'A': return "CROSS_SHORT_EXEMPT";
                case 'F': return "LEND";
                case 'C': return "OPPOSITE";
                case 'E': return "REDEEM";
                case '2': return "SELL";
                case '4': return "SELL_PLUS";
                case '5': return "SELL_SHORT";
                case '6': return "SELL_SHORT_EXEMPT";
                case 'D': return "SUBSCRIBE";
                case '7': return "UNDISCLOSED";
                default: return "UNKNOWN";
            }
        }
        private int SideSignal(char curSide)
        {
            switch (curSide)
            {
                case 'B': return 0;
                case 'G': return 0;
                case '1': return 1;
                case '3': return 1;
                case '8': return 0;
                case '9': return 0;
                case 'A': return 0;
                case 'F': return 0;
                case 'C': return 0;
                case 'E': return 0;
                case '2': return -1;
                case '4': return -1;
                case '5': return -1;
                case '6': return -1;
                case 'D': return 0;
                case '7': return 0;
                default: return 0;
            }
        }
    }
    
    public class LimitControl
    {
        public double MaxTotalGross = 0;
        public double MaxTotalNet = 0;
        public double MaxTotalShares = 0;

        public double MaxOrderAmount = 0;
        public double MaxOrderShares = 0;

        public double SentGross = 0;
        public double SentNet = 0;
        public double SentShares = 0;

        public bool CanSend()
        {
            bool tempReturn = true;
            if (SentGross > MaxTotalGross) tempReturn = false;
            if (Math.Abs(SentNet) > MaxTotalNet) tempReturn = false;
            if (SentShares > MaxTotalShares) tempReturn = false;

            if (tempReturn == false) Console.WriteLine("========== ORDER NOT SENT BECAUSE OF GLOBAL LIMIT CONTROL (CanSend)========= ");

            return tempReturn;
        }

        public bool OrderSizeOK(double Quantity, double Price)
        {
            bool tempReturn = true;

            if (Quantity * Price > MaxOrderAmount) tempReturn = false;
            if (Quantity > MaxOrderShares) tempReturn = false;

            if (tempReturn == false) Console.WriteLine("========== ORDER NOT SENT BECAUSE OF ORDER LIMIT CONTROL (OrderSizeOK)========= " + Quantity + " === " + Price);

            return tempReturn;
        }
    }

    public class OrderEventArgs : EventArgs
    {
        private string _Ticker; public string Ticker { get { return _Ticker; } set { _Ticker = value; } }

        public OrderEventArgs(string __Ticker)
        {
            _Ticker = __Ticker;
        }
    }

    public class RejectEventArgs : EventArgs
    {
        private string _IdOrder; public string IdOrder { get { return _IdOrder; } set { _IdOrder = value; } }
        private string _Symbol; public string Symbol { get { return _Symbol; } set { _Symbol = value; } }
        private double _Price; public double Price { get { return _Price; } set { _Price = value; } }
        private string _Reason; public string Reason { get { return _Reason; } set { _Reason = value; } }

        public RejectEventArgs(string __IdOrder, string __Symbol, double __Price, string __Reason)
        {
            _IdOrder = __IdOrder;
            _Symbol = __Symbol;
            _Price = __Price;
            _Reason = __Reason;
        }
    }
}
