using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Threading;
using QuickFix;
using NestDLL;
using System.IO;

namespace NFIXConn
{
    /// <summary>
    /// FIX interface to send the orders generated by strategies
    /// </summary>
    public class FIXConn_Drop : MessageCracker, QuickFix.Application, IDisposable
    {
        private FileStoreFactory _store;
        private FileLogFactory _logs;
        private MessageFactory _messages;

        private SocketAcceptor _Acceptor;
        private SessionSettings _settingsAcceptor;

        private SocketInitiator _Initiator;
        private SessionSettings _settingsInitiator;

        private string _QFConfig;
        private SessionID _ID_Session = null;
        public int ordID = 0;

        public event EventHandler OnOrderUpdate;
        public event EventHandler ReceivedUpdate;
        public event EventHandler OnReject;

        public System.Diagnostics.Stopwatch MasterClock = new System.Diagnostics.Stopwatch();

        private string curLogFilePath = "";
        
        private bool _IsAliveSession = false; public bool IsAliveSession { get { return _IsAliveSession; } }
        
        private int _ReplacesSent; public int ReplacesSent { get { return _ReplacesSent; } }
        private int _FillsReceived; public int FillsReceived { get { return _FillsReceived; } }
        private string _OrderPrefix = ""; public string OrderPrefix { get { return _OrderPrefix; } }


        private Dictionary<string, DropExec> ExecContainer = new Dictionary<string, DropExec>();

        public List<DropExec> ExecList
        {
            get
            {
                List<DropExec> ReturnExecs = new List<DropExec>();
                lock (ExecContainer)
                {
                    foreach (DropExec curExec in ExecContainer.Values)
                    {
                        DropExec newExec = new DropExec();
                        newExec = curExec.getCopy();
                        ReturnExecs.Add(newExec);
                    }
                }
                return ReturnExecs;
            }
        }

        #region Properties

        /// <summary>
        /// Full path to QuickFix configuration File
        /// </summary>
        public string QFConfig
        {
            get
            {
                return _QFConfig;
            }
        }

        /// <summary>
        /// Unique session identifier
        /// </summary>
        public QuickFix.SessionID ID_Session
        {
            get
            {
                return _ID_Session;
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Create instance of FIX class
        /// </summary>
        /// <param name="_qfConfig">QuickFix configuration file full path</param>
        public FIXConn_Drop(string _qfConfigInitiator, string _qfConfigAcceptor)
        {
            MasterClock.Start();
            long curFrequency = System.Diagnostics.Stopwatch.Frequency;
            bool curIsHighResolution = System.Diagnostics.Stopwatch.IsHighResolution;
            string tempPath = "";


            //===============================   ACCEPTORS   ==================================
            if (_qfConfigAcceptor != "")
            {
                _QFConfig = _qfConfigAcceptor;

                _settingsAcceptor = new SessionSettings(QFConfig);

                if (curLogFilePath == "")
                {
                    //foreach (SessionID tempSession in _settingsAcceptor.getSessions())
                    //{
                    //    QuickFix.Dictionary curSession = _settingsAcceptor.get(tempSession);
                    //    curSession.
                    //    tempPath = curSession.getLog().ToString(); break;
                    //}

                    tempPath = @"C:\FIXLOG\NESTDROP\";
                    curLogFilePath = tempPath + @"log\" + DateTime.Now.ToString("yyyy-MM-dd") + "";
                }

                foreach (SessionID curSession in _settingsAcceptor.getSessions())
                {
                    string tempSessionID = curSession.ToString();
                    string curFileName = curLogFilePath + "\\" + tempSessionID.Replace(">", "").Replace(":", "-") + ".messages.log";
                    LoadOrdersFromLog(curFileName);
                }

                try
                {
                    _store = new FileStoreFactory(_settingsAcceptor);
                    _logs = new FileLogFactory(curLogFilePath);
                    _messages = new DefaultMessageFactory();
                    _Acceptor = new SocketAcceptor(this, _store, _settingsAcceptor, _logs, _messages);
                    _Acceptor.start();
                }
                catch (Exception e)
                {
                    throw new Exception("Unable to create instance of class FIX", e);
                }
            }
            //===============================   INITIATORS   ==================================
            if (_qfConfigInitiator != "")
            {
                _settingsInitiator = new SessionSettings(_qfConfigInitiator);

                if (curLogFilePath == "")
                {
                    tempPath = @"C:\FIXLOG\NESTDROP\";

                    curLogFilePath = tempPath + @"log\" + DateTime.Now.ToString("yyyy-MM-dd") + "";
                }

                foreach (SessionID curSession in _settingsInitiator.getSessions())
                {
                    string tempSessionID = curSession.ToString();
                    string curFileName = curLogFilePath + "\\" + tempSessionID.Replace(">", "").Replace(":", "-") + ".messages.log";
                    LoadOrdersFromLog(curFileName);
                }

                UpdateOrderExecInsertedStatus();

                try
                {
                    _store = new FileStoreFactory(_settingsInitiator);
                    _logs = new FileLogFactory(curLogFilePath);
                    _messages = new DefaultMessageFactory();
                    _Initiator = new SocketInitiator(this, _store, _settingsInitiator, _logs, _messages);
                    _Initiator.start();
                }
                catch (Exception e)
                {
                    throw new Exception("Unable to create instance of class FIX", e);
                }
            }
        }

        #endregion

        private void LoadOrdersFromLog(string curFileName)
        {
            Console.WriteLine("Reading Log: " + curFileName);

            if (File.Exists(curFileName))
            {
                StreamReader sr = new StreamReader(curFileName);

                string tempLine = "";

                while ((tempLine = sr.ReadLine()) != null)
                {
                    if (tempLine.Contains("35=8") && FIXTagGetValue(tempLine, 32) != "")
                    {
                        if (double.Parse(FIXTagGetValue(tempLine, 32)) > 0)
                        {
                            DropExec curOrder = new DropExec();

                            Price curPrice;

                            if (FIXTagGetValue(tempLine, 44) != "")
                                curPrice = new Price(double.Parse(FIXTagGetValue(tempLine, 44).Replace('.', ',')));
                            else
                                curPrice = new Price(0);

                            curOrder.OrderID = new OrderID(FIXTagGetValue(tempLine, 37));
                            curOrder.Side = new Side(FIXTagGetValue(tempLine, 54)[0]);
                            curOrder.Symbol = new Symbol(FIXTagGetValue(tempLine, 55));
                            curOrder.LastShares = double.Parse(FIXTagGetValue(tempLine, 32));
                            curOrder.LastPrice = double.Parse(FIXTagGetValue(tempLine, 31).Replace('.', ','));
                            curOrder.Account = new Account(FIXTagGetValue(tempLine, 1));

                            if(tempLine.Contains("49=BLP")) curOrder.Account = new Account("99999999");

                            string curDate = FIXTagGetValue(tempLine, 52).Split('-')[0];
                            string curTime = FIXTagGetValue(tempLine, 52).Split('-')[1];
                            curDate = curDate.Substring(0, 4) + "-" + curDate.Substring(4, 2) + "-" + curDate.Substring(6, 2);

                            curOrder.TransactTime = DateTime.Parse(curDate + " " + curTime).Subtract(new TimeSpan(2, 0, 0));

                            curOrder.ExecBroker = new ExecBroker(FIXTagGetValue(tempLine, 128));
                            curOrder.TraderID = FIXTagGetValue(tempLine, 57);
                            curOrder.Symbol = new Symbol(FIXTagGetValue(tempLine, 55));
                            curOrder.Side = new Side(FIXTagGetValue(tempLine, 54)[0]);
                            if (FIXTagGetValue(tempLine, 38) != "") curOrder.OrderQty = new OrderQty(int.Parse(FIXTagGetValue(tempLine, 38)));
                            curOrder.Price = curPrice;
                            curOrder.Status = new OrdStatus(FIXTagGetValue(tempLine, 39)[0]);
                            curOrder.Done = double.Parse(FIXTagGetValue(tempLine, 14));
                            curOrder.BrokerOrderID = FIXTagGetValue(tempLine, 37);
                            curOrder.ExecID = FIXTagGetValue(tempLine, 17);

                            curOrder.Inserted = false;
                            curOrder.IdSecurity = getIdSecurity(curOrder.Symbol.getValue());
                            curOrder.RoundLot = getRoundLot(curOrder.IdSecurity);
                            lock (ExecContainer)
                            {
                                ExecContainer[curOrder.ExecID] = curOrder;
                            }
                        }
                    }
                }

                sr.Close();
            }
        }

        public void UpdateExecDatabaseID(string ExecID, int DatabaseID)
        {
            lock (ExecContainer)
            {
                ExecContainer[ExecID].DatabaseID = DatabaseID;
                ExecContainer[ExecID].Inserted = true;
            }
        }

        private void UpdateOrderExecInsertedStatus()
        {
            using (newNestConn curConn = new newNestConn())
            {
                lock (ExecContainer)
                {
                    foreach (DropExec curExec in ExecContainer.Values)
                    {
                        string tempIdExec = curConn.Execute_Query_String("SELECT Id_Trade FROM NESTDB.dbo.Tb013_Trades WHERE Data_Trade>='" + DateTime.Now.ToString("yyyy-MM-dd") + "' AND ExecID='" + curExec.ExecID + "' AND StatusTrade<>4");
                        //Console.WriteLine(curExec.ExecID);
                        if (tempIdExec != "")
                        {
                            curExec.Inserted = true;
                        }
                    }
                }
            }
        }

        private string FIXTagGetValue(string tempLine, int FIXField)
        {
            string[] curRow = tempLine.Split('');

            foreach (string curString in curRow)
            {
                if (curString != "")
                {
                    string[] tempParts = curString.Split('=');
                    if (int.Parse(tempParts[0]) == FIXField) return tempParts[1];
                }
            }

            return "";
        }

        //private string getSymbol(int IdSecurity)
        //{
        //    string SQLExpresion = "SELECT EXCHANGETICKER FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE IDSECURITY = " + IdSecurity.ToString();

        //    string result = "";

        //    using (newNestConn conn = new newNestConn())
        //    {
        //        if ((result = conn.Execute_Query_String(SQLExpresion)) == "")
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //    }

        //    return result;
        //}

        private Dictionary<string, int> SymbolToIdSecurity = new Dictionary<string, int>();

        private int getIdSecurity(string Symbol)
        {
            int tempVal;
            int result = 0;

            if (SymbolToIdSecurity.TryGetValue(Symbol, out tempVal))
            {
                result = tempVal;
            }
            else
            {
                {
                    string SQLExpresion = "SELECT IDSECURITY FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE EXCHANGETICKER = '" + Symbol + "'";
                    using (newNestConn conn = new newNestConn())
                    {
                        result = conn.Return_Int(SQLExpresion);
                    }
                }

                if (result == 0)
                {
                    string SQLExpresion = "SELECT IDSECURITY FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE NESTTICKER = '" + Symbol + "'";
                    using (newNestConn conn = new newNestConn())
                    {
                        result = conn.Return_Int(SQLExpresion);
                    }
                }

                if (result == 0)
                {
                    string SQLExpresion = "SELECT IDSECURITY FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE REUTERSTICKER = '" + Symbol + "'";
                    using (newNestConn conn = new newNestConn())
                    {
                        result = conn.Return_Int(SQLExpresion);
                    }
                }

                if (result != 0) SymbolToIdSecurity.Add(Symbol, result);
            }

            return result;
        }

        private Dictionary<int, double> IdSecurityToRoundLot = new Dictionary<int, double>();

        private double getRoundLot(int IdSecurity)
        {
            double tempVal;
            double result = 0;

            if (IdSecurityToRoundLot.TryGetValue(IdSecurity, out tempVal))
            {
                result = tempVal;
            }
            else
            {
                string SQLExpresion = "SELECT RoundLot FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE IDSECURITY = " + IdSecurity.ToString();

                using (newNestConn conn = new newNestConn())
                {
                    result = conn.Return_Double(SQLExpresion);
                }

                if (result != 0) IdSecurityToRoundLot.Add(IdSecurity, result);
            }
            return result;
        }


        #region Receive Messages 4.2

        public override void onMessage(QuickFix42.ExecutionReport message, SessionID session)
        {
            UpdateOrder(message, session);
        }

        private void UpdateOrder(QuickFix42.ExecutionReport message, SessionID session)
        {
            if (message.getLastShares().getValue() > 0)
            {
                DropExec curOrder = new DropExec();

                curOrder.OrderID = message.getOrderID();
                curOrder.Side = message.getSide();
                curOrder.Symbol = message.getSymbol();
                if (message.isSetField(LastShares.FIELD)) curOrder.LastShares = message.getLastShares().getValue();
                curOrder.LastPrice = message.getLastPx().getValue();

                if (message.isSetField(ExecBroker.FIELD)) curOrder.ExecBroker = message.getExecBroker();

                if (message.isSetField(Account.FIELD))
                {
                    curOrder.Account = message.getAccount();
                }
                else
                {
                    if (session.toString().Contains("FIX.4.2:NEST->BLP"))
                    {
                        curOrder.Account = new Account("99999999");
                    }
                }

                curOrder.TransactTime = message.getTransactTime().getValue();
                if (message.isSetField(57)) curOrder.TraderID = message.getField(57);
                curOrder.Symbol = message.getSymbol();
                curOrder.Side = message.getSide();
                curOrder.OrderQty = message.getOrderQty();

                if (message.isSetField(Price.FIELD)) curOrder.Price = message.getPrice();
                curOrder.Status = message.getOrdStatus();
                curOrder.Done = message.getCumQty().getValue();
                curOrder.BrokerOrderID = message.getOrderID().getValue();
                curOrder.ExecID = message.getExecID().getValue();

                curOrder.Inserted = false;
                curOrder.IdSecurity = getIdSecurity(curOrder.Symbol.getValue());
                curOrder.RoundLot = getRoundLot(curOrder.IdSecurity);
                lock (ExecContainer)
                {
                    if (!ExecContainer.ContainsKey(curOrder.ExecID))
                        ExecContainer.Add(curOrder.ExecID, curOrder);
                }
            }
        }

        public override void onMessage(QuickFix42.OrderCancelReject message, SessionID session)
        {
            
        }

        #endregion

        #region Receive Messages 4.4

        public override void onMessage(QuickFix44.ExecutionReport message, SessionID session)
        {
            UpdateOrder44(message, session);
        }

        private void UpdateOrder44(QuickFix44.ExecutionReport message, SessionID session)
        {
            if (message.getLastQty().getValue() > 0)
            {
                DropExec curOrder = new DropExec();

                curOrder.OrderID = message.getOrderID();
                curOrder.Side = message.getSide();
                curOrder.Symbol = message.getSymbol();
                if (message.isSetField(LastShares.FIELD)) curOrder.LastShares = message.getLastQty().getValue();
                curOrder.LastPrice = message.getLastPx().getValue();

                curOrder.Account = message.getAccount();
                curOrder.TransactTime = message.getTransactTime().getValue();
                if (message.isSetField(57)) curOrder.TraderID = message.getField(57);
                curOrder.Symbol = message.getSymbol();
                curOrder.Side = message.getSide();
                curOrder.OrderQty = message.getOrderQty();

                if (message.isSetField(Price.FIELD)) curOrder.Price = message.getPrice();
                curOrder.Status = message.getOrdStatus();
                curOrder.Done = message.getCumQty().getValue();
                curOrder.BrokerOrderID = message.getOrderID().getValue();
                curOrder.ExecID = message.getExecID().getValue();

                curOrder.Inserted = false;
                curOrder.IdSecurity = getIdSecurity(curOrder.Symbol.getValue());
                curOrder.RoundLot = getRoundLot(curOrder.IdSecurity);
                lock (ExecContainer)
                {
                    if (!ExecContainer.ContainsKey(curOrder.ExecID))
                        ExecContainer.Add(curOrder.ExecID, curOrder);
                }
            }
        }

        public override void onMessage(QuickFix44.OrderCancelReject message, SessionID session)
        {

        }

        #endregion

        #region QuickFix Events
        /// <summary>
        /// Called on FIX session creation
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onCreate(SessionID sessionID)
        {
            _ID_Session = sessionID;
        }

        /// <summary>
        /// Called on successful logon
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onLogon(SessionID sessionID)
        {
            _IsAliveSession = true;
            string curSenderId =sessionID.getSenderCompID();
            if (curSenderId.Length > 3)
            {
                _OrderPrefix = curSenderId.Substring(curSenderId.Length - 3, 3);
            }
            else
            {
                throw new System.NotImplementedException();
            }
        }

        /// <summary>
        /// Called when connection ends
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onLogout(SessionID sessionID)
        {
            _IsAliveSession = false;
        }

        /// <summary>
        /// Called before the application sends a session message
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void toAdmin(Message message, SessionID sessionID)
        {
        }

        /// <summary>
        /// Called when a session message is received
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void fromAdmin(Message message, SessionID sessionID)
        {
            crack(message, sessionID);
        }

        /// <summary>
        /// Called before the application sends an application message
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void toApp(Message message, SessionID sessionID)
        {
            //SenderSubID _senderSubId = new SenderSubID("UA");

            //if (!message.isSetField(_senderSubId)) { message.setField(_senderSubId); }
        }

        /// <summary>
        /// Called when an application message is received
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void fromApp(Message message, SessionID sessionID)
        {
            try
            {
                crack(message, sessionID);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                Console.WriteLine(message.ToXML());
            }
        }
        #endregion

        #region Disposable Region

        /// <summary>
        /// Disposes FIX class
        /// </summary>
        public void Dispose()
        {
            _Acceptor.stop();
        }//Dispose



        #endregion

    }//FixConn

    public class DropExec
    {
        public DropExec()
        { 
        }

        public DropExec getCopy()
        {
            DropExec tempDropExec = (DropExec)this.MemberwiseClone();

            if (this.Account != null) tempDropExec.Account = new Account(this.Account.getValue());
            if (this.Symbol != null) tempDropExec.Symbol = new Symbol(this.Symbol.getValue());
            if (this.Side != null) tempDropExec.Side = new Side(this.Side.getValue());
            if (this.OrderQty != null) tempDropExec.OrderQty = new OrderQty(this.OrderQty.getValue());
            if (this.ExecBroker != null) tempDropExec.ExecBroker = new ExecBroker(this.ExecBroker.getValue());
            if (this.Status != null) tempDropExec.Status = new OrdStatus(this.Status.getValue());
            if (this.Price != null) tempDropExec.Price = new Price(this.Price.getValue());
            if (this.TransactTime != null) tempDropExec.TransactTime = this.TransactTime;

            return tempDropExec;
        }

        public DropExec(OrderID clOrdID, int IdSecurity, Symbol symbol, Side side, OrderQty orderQty, Price price)
        {
            _OrderID = clOrdID;
            _IdSecurity = IdSecurity;
            _Symbol = symbol;
            _Side = side;
            _OrderQty = orderQty;
            _Price = price;
        }

        private string _ExecID; public string ExecID { get { return _ExecID; } set { _ExecID = value; } }
        private OrderID _OrderID; public OrderID OrderID { get { return _OrderID; } set { _OrderID = value; } }
        private string _BrokerOrderID = ""; public string BrokerOrderID { get { return _BrokerOrderID; } set { _BrokerOrderID = value; } }

        private int _IdPortfolio = 0; public int IdPortfolio { get { return _IdPortfolio; } set { _IdPortfolio = value; } }
        private int _IdBook = 0; public int IdBook { get { return _IdBook; } set { _IdBook = value; } }
        private int _IdSection = 0; public int IdSection { get { return _IdSection; } set { _IdSection = value; } }
        private double _RoundLot; public double RoundLot { get { return _RoundLot; } set { _RoundLot = value; } }

        private bool _Inserted = false; public bool Inserted { get { return _Inserted; } set { _Inserted = value; } }
        private int _DatabaseID = 0; public int DatabaseID { get { return _DatabaseID; } set { _DatabaseID = value; } }

        private Account _Account; public Account Account { get { return _Account; } set { _Account = value; } }
        private Symbol _Symbol; public Symbol Symbol { get { return _Symbol; } set { _Symbol = value; } }
        private Side _Side; public Side Side { get { return _Side; } set { _Side = value; } }
        private OrderQty _OrderQty; public OrderQty OrderQty { get { return _OrderQty; } set { _OrderQty = value; } }
        private ExecBroker _ExecBroker; public ExecBroker ExecBroker { get { return _ExecBroker; } set { _ExecBroker = value; } }
        
        private double _LastShares; public double LastShares { get { return _LastShares; } set { _LastShares = value; } }
        private double _LastPrice; public double LastPrice { get { return _LastPrice; } set { _LastPrice = value; } }
        private bool _ZeroMoney; public bool ZeroMoney { get { return _ZeroMoney; } set { _ZeroMoney = value; } }

        private OrdStatus _Status; public OrdStatus Status { get { return _Status; } set { _Status = value; } }
        private Price _Price; public Price Price { get { return _Price; } set { _Price = value; } }
        private int _IdSecurity; public int IdSecurity { get { return _IdSecurity; } set { _IdSecurity = value; } }
        private double _Done; public double Done { get { return _Done; } set { _Done = value; } }

        private DateTime _TransactTime; public DateTime TransactTime { get { return _TransactTime; } set { _TransactTime = value; } }
        private string _TraderID = ""; public string TraderID { get { return _TraderID; } set { _TraderID = value; } }
        private int _TipoMercado = 0; public int TipoMercado { get { return _TipoMercado; } set { _TipoMercado = value; } }
        public double NetDone { get { return _Done * SideSignal(_Side.getValue()); } }
        public double NetLastShares { get { return _LastShares * SideSignal(_Side.getValue()); } }

        //private double _TimeToAck;public double TimeToAck { get { return _TimeToAck; } set { _TimeToAck = value; } }
        //private double _SentTick;public double SentTick { get { return _SentTick; } set { _SentTick = value; } }
        //private string _Fund = "";public string Fund { get { return _Fund; } set { _Fund = value; } }
        //private int _DisplayShares = 0;public int DisplayShares { get { return _DisplayShares; } set { _DisplayShares = value; } }
        //private double _ExecPrice;public double ExecPrice { get { return _ExecPrice; } set { _ExecPrice = value; } }
        //private double _Leaves;public double Leaves { get { return _Leaves; } set { _Leaves = value; } }
        //private bool _Updated = false; public bool Updated { get { return _Updated; } set { _Updated = value; } }

        public void ChangeStatus(OrdStatus ordStatus)
        {
            Status = ordStatus;
        }

        private string ConvertStatus(char curStatus)
        {
            switch (curStatus)
            {
                case 'D': return "ACCEPTED_FOR_BIDDING"; break;
                case 'B': return "CALCULATED"; break;
                case '4': return "CANCELED"; break;
                case '3': return "DONE_FOR_DAY"; break;
                case 'C': return "EXPIRED"; break;
                case '2': return "FILLED"; break;
                case '0': return "NEW"; break;
                case '1': return "PARTIALLY_FILLED"; break;
                case '6': return "PENDING_CANCEL"; break;
                case 'A': return "PENDING_NEW"; break;
                case 'E': return "PENDING_REPLACE"; break;
                case '8': return "REJECTED"; break;
                case '5': return "REPLACED"; break;
                case '7': return "STOPPED"; break;
                case '9': return "SUSPENDED"; break;
                default: return "UNKNOWN";
            }
        }
        private string ConvertSide(char curSide)
        {
            switch (curSide)
            {
                case 'B': return "AS_DEFINED";
                case 'G': return "BORROW";
                case '1': return "BUY";
                case '3': return "BUY_MINUS";
                case '8': return "CROSS";
                case '9': return "CROSS_SHORT";
                case 'A': return "CROSS_SHORT_EXEMPT";
                case 'F': return "LEND";
                case 'C': return "OPPOSITE";
                case 'E': return "REDEEM";
                case '2': return "SELL";
                case '4': return "SELL_PLUS";
                case '5': return "SELL_SHORT";
                case '6': return "SELL_SHORT_EXEMPT";
                case 'D': return "SUBSCRIBE";
                case '7': return "UNDISCLOSED";
                default: return "UNKNOWN";
            }
        }
        private int SideSignal(char curSide)
        {
            switch (curSide)
            {
                case 'B': return 0;
                case 'G': return 0;
                case '1': return 1;
                case '3': return 1;
                case '8': return 0;
                case '9': return 0;
                case 'A': return 0;
                case 'F': return 0;
                case 'C': return 0;
                case 'E': return 0;
                case '2': return -1;
                case '4': return -1;
                case '5': return -1;
                case '6': return -1;
                case 'D': return 0;
                case '7': return 0;
                default: return 0;
            }
        }
    }
}
