using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Threading;
using QuickFix;
using NestDLL;
using System.IO;

namespace NFIXConnLT
{
    /// <summary>
    /// FIX interface to send the orders generated by strategies
    /// </summary>
    public class FIXConnLT : MessageCracker, QuickFix.Application, IDisposable
    {
        private SessionSettings _settings;
        private FileStoreFactory _store;
        private FileLogFactory _logs;
        private MessageFactory _messages;
        private SocketInitiator _initiator;
        private string _QFConfig;
        private SessionID _ID_Session = null;
        public int ordID = 0;

        public event EventHandler OnOrderUpdate;
        public event EventHandler ReceivedUpdate;
        public event EventHandler OnReject;

        public System.Diagnostics.Stopwatch MasterClock = new System.Diagnostics.Stopwatch();

        private string curLogFilePath = "";

        private bool ReadingOutsLog = false;

        public LimitControl curLimits = new LimitControl();

        private bool _IsAliveSession = false; public bool IsAliveSession { get { return _IsAliveSession; } }
        
        private int _ReplacesSent; public int ReplacesSent { get { return _ReplacesSent; } }
        private int _FillsReceived; public int FillsReceived { get { return _FillsReceived; } }
        
        private string _OrderPrefix = ""; public string OrderPrefix { get { return _OrderPrefix; } }
        private string _BrokerSession = ""; public string BrokerSession { get { return _BrokerSession; } }
        
        private System.Collections.ArrayList arrSessions;
        
        private List<char> _lOrdTypeLimit = new List<char>() { OrdType.LIMIT, OrdType.LIMIT_ON_CLOSE, OrdType.STOP, OrdType.STOP_LIMIT };

        private Dictionary<string, string> curOrderToOrigID = new Dictionary<string, string>();
        private Dictionary<string, OrderLT> OrderContainer = new Dictionary<string, OrderLT>();
        private Dictionary<string, ExecLT> ExecContainer = new Dictionary<string, ExecLT>();

        private Mutex MutexOrderContainer = new Mutex();
        private Mutex MutexExecContainer = new Mutex();

        // TRATA SESSOES ----------------------------------------------------------------
        private Session SessionFromType(string strType)
        {
            SessionID ID = new SessionID();
            Session LookingAt = null;
            string lookupType = "";

            if (strType == "44") lookupType = "4.4";
            if (strType == "42") lookupType = "4.2";

            for (int i = 0; i < arrSessions.Count; i++)
			{
                ID.fromString(arrSessions[i].ToString());
                if (ID.getBeginString().Contains(lookupType))
                {
                    LookingAt = Session.lookupSession(ID);
                    break;
                }
			}
                        
            return LookingAt; 
        }

        private Session SessionFromSenderID(string strSender)
        {
            SessionID ID = new SessionID();
            Session LookingAt = null;

            for (int i = 0; i < arrSessions.Count; i++)
            {
                ID.fromString(arrSessions[i].ToString());
                if (ID.toString().Contains(strSender))
                {
                    LookingAt = Session.lookupSession(ID);
                    break;
                }
            }

            return LookingAt;
        }

        public List<OrderLT> OrderList
        {
            get
            {
                MutexOrderContainer.WaitOne();

                List<OrderLT> ReturnOrders = new List<OrderLT> ();
                foreach (OrderLT curOrder in OrderContainer.Values)
                {
                    OrderLT newOrder = curOrder.getCopy();
                    ReturnOrders.Add(newOrder);
                }

                MutexOrderContainer.ReleaseMutex();
                return ReturnOrders;
            }
        }

        public List<ExecLT> ExecList
        {
            get
            {

                MutexExecContainer.WaitOne();

                List<ExecLT> ReturnExecs = new List<ExecLT>();
                foreach (ExecLT curExec in ExecContainer.Values)
                {
                    ExecLT newExec = curExec.getCopy();
                    ReturnExecs.Add(newExec);
                }

                MutexExecContainer.ReleaseMutex();
                return ReturnExecs;
            }
        }

        #region Properties

        /// <summary>
        /// Full path to QuickFix configuration File
        /// </summary>
        public string QFConfig
        {
            get
            {
                return _QFConfig;
            }
        }

        /// <summary>
        /// Unique session identifier
        /// </summary>
        public QuickFix.SessionID ID_Session
        {
            get
            {
                return _ID_Session;
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Create instance of FIX class
        /// </summary>
        /// <param name="_qfConfig">QuickFix configuration file full path</param>
        public FIXConnLT(string _qfConfig)
        {
            MasterClock.Start();

            long curFrequency = System.Diagnostics.Stopwatch.Frequency;
            bool curIsHighResolution = System.Diagnostics.Stopwatch.IsHighResolution;

            string tempPath = (_qfConfig).Substring(0, (_qfConfig).LastIndexOf('\\') -1);
            string tempPath2 = (tempPath).Substring(0, (tempPath).LastIndexOf('\\') + 1);

            curLogFilePath = @"C:\FIXLOG\LiveTrade\log\" + DateTime.Now.ToString("yyyy-MM-dd") + "";

            _QFConfig = _qfConfig;

            _settings = new SessionSettings(QFConfig);

            ordID = 0;

            LoadOrdersFromLog();

            try
            {
                _store = new FileStoreFactory(_settings);
                _logs = new FileLogFactory(curLogFilePath);
                _messages = new DefaultMessageFactory();
                _initiator = new SocketInitiator(this, _store, _settings, _logs, _messages);
                _initiator.start();
            }
            catch (Exception e)
            {
                throw new Exception("Unable to create instance of class FIX", e);
            }//catch

            //getLastOrdID();

        }//FIX

        #endregion

        private void LoadOrdersFromLog()
        {
            foreach (SessionID curSession in _settings.getSessions())
            {
                string tempSessionName = curSession.ToString();

                string tempSessionID = tempSessionName;

                string curFileName = curLogFilePath + "\\" + tempSessionID.Replace(">", "").Replace(":", "-") + ".messages.log";

                LoadOrdersFromLogFile(curFileName);
            }

            ReadingOutsLog = true;

            string curFileNameOuts = curLogFilePath + "\\AddOuts.log";

            if (File.Exists(curFileNameOuts))
            {
                string tempLine = "";

                StreamReader sr = new StreamReader(curFileNameOuts, true);

                while ((tempLine = sr.ReadLine()) != null)
                {
                    AddOutsToOrder(tempLine);
                }
            }

            ReadingOutsLog = false;
        }

        private void LoadOrdersFromLogFile(string curFileName)
        {
            if (File.Exists(curFileName))
            {
                StreamReader sr = new StreamReader(curFileName);

                string tempLine = "";

                while ((tempLine = sr.ReadLine()) != null)
                {
                    if (tempLine.Contains("35=D"))
                    {
                        OrderID curOrderID = new OrderID(FIXTagGetValue(tempLine, 37));
                        ClOrdID curClOrdID = new ClOrdID(FIXTagGetValue(tempLine, 11));
                        Symbol curSymbol = new Symbol(FIXTagGetValue(tempLine, 55));
                        Side curSide = new Side(FIXTagGetValue(tempLine, 54)[0]);
                        OrderQty curOrderQty = new OrderQty(int.Parse(FIXTagGetValue(tempLine, 38)));
                        string curSessionUsed = FIXTagGetValue(tempLine, 49);

                        Console.WriteLine("##### " + curClOrdID);

                        Price curPrice;
                        
                        int tempOrdId = int.Parse(curClOrdID.getValue().Replace("NEW_", "").Substring(3));
                        if (tempOrdId > ordID) ordID = tempOrdId;
                        
                        if(FIXTagGetValue(tempLine, 44) != "")
                            curPrice = new Price(double.Parse(FIXTagGetValue(tempLine, 44)));
                        else
                            curPrice = new Price(0);

                        OrderLT curOrder = new OrderLT(curClOrdID, getIdSecurity(curSymbol.getValue()), curSymbol, curSide, curOrderQty, curPrice, curSessionUsed);
                        
                        curOrder.SentTime = DateTime.Parse(FIXTagGetValue(tempLine, 52).Split('-')[1]).TimeOfDay.Subtract(new TimeSpan(2, 0, 0));
                        curOrder.Account = new Account(FIXTagGetValue(tempLine, 1)); ;
                        curOrder.DeliverToCompID = new DeliverToCompID(FIXTagGetValue(tempLine, 128));
                        if(FIXTagGetValue(tempLine, 115) != "") curOrder.IdBook = int.Parse(FIXTagGetValue(tempLine, 115));
                        if(FIXTagGetValue(tempLine, 116) != "") curOrder.IdSection = int.Parse(FIXTagGetValue(tempLine, 116));
                        //if (FIXTagGetValue(tempLine, 109) != "") curOrder.IdPortfolio = int.Parse(FIXTagGetValue(tempLine, 109)); 
                        if(FIXTagGetValue(tempLine, 111) != "") curOrder.DisplayShares = int.Parse(FIXTagGetValue(tempLine, 111));

                        if (OrderContainer.ContainsKey(curOrder.ClOrdID.getValue()))
                        {
                            if (!tempLine.Contains("43=Y"))
                            {
                                MutexOrderContainer.WaitOne();
                                OrderContainer.Add(curOrder.ClOrdID.getValue(), curOrder);
                                MutexOrderContainer.ReleaseMutex();
                            }
                        }
                        else
                        {
                            MutexOrderContainer.WaitOne(); 
                            OrderContainer.Add(curOrder.ClOrdID.getValue(), curOrder);
                            MutexOrderContainer.ReleaseMutex();
                        }
                    }

                    if (tempLine.Contains("35=8"))
                    {
                        string curClOrdID;
                        string curOrderID;

                        curClOrdID = FIXTagGetValue(tempLine, 11);
                        curOrderID = FIXTagGetValue(tempLine, 37);
                        
                        int tempOrdId = int.Parse(curClOrdID.Replace("NEW_", "").Substring(3));
                        if (tempOrdId > ordID) ordID = tempOrdId;

                        if (tempLine.Contains("39=5"))
                        {
                            _ReplacesSent++;
                        }

                        if (tempLine.Contains("39=0"))
                        {
                            if (OrderContainer.ContainsKey(curClOrdID))
                            {
                                MutexOrderContainer.WaitOne();

                                OrderLT tempOrderLT = OrderContainer[curClOrdID];
                                tempOrderLT.SetOrderID(new OrderID(curOrderID));
                                OrderContainer.Remove(curClOrdID);
                                OrderContainer.Add(tempOrderLT.OrderID.getValue(), tempOrderLT);

                                MutexOrderContainer.ReleaseMutex();
                            }
                            else
                            {
                                if (!tempLine.Contains("43=Y"))
                                {

                                }
                            }
                        }

                        OrderLT curOrder;

                        if (tempLine.Contains("17=rej") || tempLine.Contains("17=REJ"))
                        {
                            curOrderID = FIXTagGetValue(tempLine, 37);
                        }

                        if (OrderContainer.TryGetValue(curOrderID, out curOrder))
                        {
                            curOrder.Symbol = new Symbol(FIXTagGetValue(tempLine, 55));
                            curOrder.Side = new Side(FIXTagGetValue(tempLine, 54)[0]);
                            if(FIXTagGetValue(tempLine, 38) != "") curOrder.OrderQty = new OrderQty(int.Parse(FIXTagGetValue(tempLine, 38)));

                            Price curPrice;

                            if (FIXTagGetValue(tempLine, 44) != "")
                                curPrice = new Price(double.Parse(FIXTagGetValue(tempLine, 44).Replace(".", ",")));
                            else
                                curPrice = new Price(0);

                            curOrder.Price = curPrice;
                            curOrder.ExecPrice = double.Parse(FIXTagGetValue(tempLine, 6).Replace(".", ","));
                            curOrder.Status = new OrdStatus(FIXTagGetValue(tempLine, 39)[0]);
                            curOrder.Done = double.Parse(FIXTagGetValue(tempLine, 14));
                            curOrder.Leaves = double.Parse(FIXTagGetValue(tempLine, 151));
                            curOrder.ClOrdID = new ClOrdID(curClOrdID);
                            curOrder.BrokerOrderID = FIXTagGetValue(tempLine, 37);
                            if(FIXTagGetValue(tempLine, 111) != "") curOrder.DisplayShares = int.Parse(FIXTagGetValue(tempLine, 111));
                        }

                        string curExecID = FIXTagGetValue(tempLine, 17);

                        if (!ExecContainer.ContainsKey(curExecID))
                        {
                            if (FIXTagGetValue(tempLine, 32) != "")
                            {
                                ExecLT curExecLT = new ExecLT();
                                curExecLT.ExecID = curExecID;
                                curExecLT.OrderID = new OrderID(curOrderID);
                                curExecLT.LastShares = double.Parse(FIXTagGetValue(tempLine, 32));
                                // curExecLT.LastPrice = double.Parse(FIXTagGetValue(tempLine, 31).Replace(".", ","));
                                if (tempLine.Contains("31=")) curExecLT.LastPrice = double.Parse(FIXTagGetValue(tempLine, 31).Replace(".", ","));

                                curExecLT.Inserted = false;

                                ExecContainer.Add(curExecID, curExecLT);

                                curLimits.SentGross += Math.Abs(curExecLT.LastShares * curExecLT.LastPrice);
                                curLimits.SentShares += Math.Abs(curExecLT.LastShares);

                                if (curOrder != null)
                                {
                                    if (curOrder.Side.getValue() == Side.BUY) curLimits.SentNet += curExecLT.LastShares * curExecLT.LastPrice;
                                    if (curOrder.Side.getValue() == Side.SELL || curOrder.Side.getValue() == Side.SELL_SHORT) curLimits.SentNet += -curExecLT.LastShares * curExecLT.LastPrice;
                                }
                            }
                        }
                    }
                }

                sr.Close();
            }

            ordID++;
            UpdateOrderExecInsertedStatus();
        }

        public void UpdateOrderDatabaseID(string origOrderID, string DatabaseID)
        {
            OrderContainer[origOrderID].DatabaseID = DatabaseID;
            OrderContainer[origOrderID].Inserted = true;
        }

        public void UpdateExecDatabaseID(string ExecID, string DatabaseID)
        {
            ExecContainer[ExecID].DatabaseID = DatabaseID;
            ExecContainer[ExecID].Inserted = true;
        }

        private void UpdateOrderExecInsertedStatus()
        {
            using (newNestConn curConn = new newNestConn())
            {
                foreach (OrderLT curOrder in OrderList)
                {
                    string tempIdOrder = curConn.Execute_Query_String("SELECT Id_Ordem FROM NESTDB.dbo.Tb012_Ordens WHERE Data_Abert_Ordem ='" + DateTime.Now.ToString("yyyy-MM-dd") + "' AND Id_Order_Broker='" + curOrder.OrderID.getValue() + "' AND Status_Ordem<>4");
                    if (tempIdOrder != "") curOrder.Inserted = true;
                }
                foreach (ExecLT curExec in ExecList)
                {
                    string tempIdExec = curConn.Execute_Query_String("SELECT Id_Trade FROM NESTDB.dbo.Tb013_Trades WHERE Data_Trade ='" + DateTime.Now.ToString("yyyy-MM-dd") + "' AND ExecID='" + curExec.ExecID + "' AND StatusTrade<>4");
                    if (tempIdExec != "") curExec.Inserted = true;
                }
            }
        }

        public void AddOutsToOrder(string strOrderID)
        {
            strOrderID = strOrderID.Replace("NEW_", "");

            OrderLT curOrder;
            if (OrderContainer.TryGetValue(strOrderID, out curOrder))
            {
                if (curOrder.Leaves != 0 || curOrder.Status.getValue() == new OrdStatus(OrdStatus.PENDING_NEW).getValue())
                {
                    curOrder.Leaves = 0;
                    curOrder.Status = new OrdStatus(OrdStatus.CANCELED);

                    if (OnOrderUpdate != null)
                    {
                        NCommonTypes.FIXOrder UpdateOrderArgs = new NCommonTypes.FIXOrder(OrderContainer[strOrderID].IdSecurity, OrderContainer[strOrderID].Symbol.getValue(), OrderContainer[strOrderID].strSide, -1, -1);

                        UpdateOrderArgs.ClOrdID = OrderContainer[strOrderID].ClOrdID.getValue();
                        UpdateOrderArgs.OrderID = OrderContainer[strOrderID].OrderID.getValue();

                        UpdateOrderArgs.strStatus = OrderContainer[strOrderID].strStatus;

                        UpdateOrderArgs.Done = (int)OrderContainer[strOrderID].Done;
                        UpdateOrderArgs.Cancelled = 0;

                        UpdateOrderArgs.ExecPrice = OrderContainer[strOrderID].ExecPrice;

                        OnOrderUpdate(this, new OrderEventArgs(OrderContainer[strOrderID].Symbol.getValue().ToString()));
                    }
                }
            }

            if (ReadingOutsLog == false)
            {
                string curFileName = curLogFilePath + "\\AddOuts.log";

                StreamWriter sw = new StreamWriter(curFileName, true);
                sw.WriteLine(strOrderID);
                sw.Close();
            }
        }

        #region Send Messages

        private string FIXTagGetValue(string tempLine, int FIXField)
        {
            string[] curRow = tempLine.Split('');

            foreach (string curString in curRow)
            {
                if (curString != "")
                {
                    string[] tempParts = curString.Split('=');
                    if (int.Parse(tempParts[0]) == FIXField) return tempParts[1];
                }
            }

            return "";
        }

        public void resendAllStatus()
        { 
            foreach(OrderLT curOrder in OrderContainer.Values)
            {
                ReportUpdate(curOrder.OrderID.getValue());
            }
        }

        public string sendOrder(int IdAccount, int IdSecurity, int curQuantity, double curPrice, int curMaxFloor, int IdPortfolio, int IdBook, int IdSection, DeliverToCompID _DeliverToCompID, string SessionType)
        {   
            OrdType _ordType = new OrdType();
            Side curSide = new Side();

            curSide = new Side((curQuantity >= 0 ? Side.BUY : Side.SELL));

            if (curPrice > 0)
            {
                _ordType.setValue(OrdType.LIMIT);
            }
            else if (curPrice == -1)
            {
                _ordType.setValue(OrdType.MARKET);
            }
            else if (curPrice == -2)
            {
                _ordType = new OrdType(OrdType.ON_CLOSE);
            }
            else
            {
                return "";
            }

            string result = sendOrder(IdAccount, IdSecurity, curSide, curQuantity, curPrice, _ordType, IdPortfolio, IdBook, IdSection, "", _DeliverToCompID, new MaxFloor(curMaxFloor), SessionType);

            return result;
        }

        private string sendOrder(int IdAccount, int IdSecurity, Side curSide, int Qty, double curPrice, OrdType curOrdType, int IdPortfolio, int IdBook, int IdSection, string extension, DeliverToCompID curDeliverToCompID, MaxFloor curMaxFloor, string SessionType)
        {
            // ---- Pega Prefixo para proxima ordem
            string OrderID = nextClOrderID( SessionFromType(SessionType).getSessionID().getSenderCompID() );
            // -------------------------------------
            
            HandlInst _handlInst = new HandlInst(HandlInst.AUTOMATED_EXECUTION_ORDER_PRIVATE);

            string symbol = getSymbol(IdSecurity).Split('.')[0];

            if (extension != "")
            {
                symbol = symbol + "." + extension;
            }

            Symbol _symbol = new Symbol(symbol.Trim());
            TransactTime _tTime = new TransactTime(DateTime.Now);
            OrderQty curOrderQty = new OrderQty((double)(Math.Abs(Qty)));
            ClOrdID _clOrdId = new ClOrdID(OrderID);

            QuickFix42.NewOrderSingle orderSingle = new QuickFix42.NewOrderSingle(_clOrdId, _handlInst, _symbol, curSide, _tTime, curOrdType);
            
            orderSingle.setInt(1, IdAccount);
            //if (curMaxFloor.getValue() >= 10000) orderSingle.set(curMaxFloor);
            if (curMaxFloor.getValue() >= 5000) orderSingle.set(curMaxFloor);
            //orderSingle.setField(curDeliverToCompID);
            orderSingle.set(curOrderQty);
            orderSingle.set(curOrdType);

            //orderSingle.setField(new ClientID(IdPortfolio.ToString()));                     // Field 109
            orderSingle.getHeader().setField(curDeliverToCompID);
            orderSingle.getHeader().setField(new OnBehalfOfCompID(IdBook.ToString()));      // Field 115
            orderSingle.getHeader().setField(new OnBehalfOfSubID(IdSection.ToString()));    // Field 116
            

            if (_lOrdTypeLimit.Contains(curOrdType.getValue()))
            {
                orderSingle.set(new Price(curPrice));
            }

            // orderSingle.getHeader().setField(50, "FD");
            
            OrderLT newOrd = new OrderLT(_clOrdId, IdSecurity, _symbol, curSide, curOrderQty, new Price(curPrice), SessionFromType(SessionType).getSessionID().getSenderCompID());
            newOrd.SentTime = DateTime.Now.TimeOfDay;
            newOrd.SentTick = MasterClock.ElapsedMilliseconds;
            newOrd.Account = new Account(IdAccount.ToString());
            newOrd.DeliverToCompID = curDeliverToCompID;
            newOrd.IdPortfolio = IdPortfolio;
            newOrd.IdBook = IdBook;
            newOrd.IdSection = IdSection;
            newOrd.DisplayShares = (int)curMaxFloor.getValue();

            MutexOrderContainer.WaitOne();
            OrderContainer.Add(newOrd.OrderID.getValue(), newOrd);
            MutexOrderContainer.ReleaseMutex();

            curOrderToOrigID.Add(_clOrdId.getValue(), _clOrdId.getValue());

            curLimits.SentGross += Math.Abs(curOrderQty.getValue() * curPrice);
            if (curSide.getValue() == Side.BUY) curLimits.SentNet += curOrderQty.getValue() * curPrice;
            if (curSide.getValue() == Side.SELL || curSide.getValue() == Side.SELL_SHORT) curLimits.SentNet += -curOrderQty.getValue() * curPrice;
            curLimits.SentShares += Math.Abs(curOrderQty.getValue());
            curLimits.Ticker = symbol;

            if (curLimits.CanSend() && curLimits.OrderSizeOK(curOrderQty.getValue(), curPrice))
            {
                //Session.sendToTarget(orderSingle, RetornarSessionID());
                Session.sendToTarget(orderSingle, SessionFromSenderID(newOrd.OrderCompID).getSessionID());
            }
            else
            {
                OrderContainer[newOrd.OrderID.getValue()].Status = new OrdStatus(OrdStatus.REJECTED);

                curLimits.SentGross -= Math.Abs(curOrderQty.getValue() * curPrice);
                if (curSide.getValue() == Side.BUY) curLimits.SentNet -= curOrderQty.getValue() * curPrice;
                if (curSide.getValue() == Side.SELL || curSide.getValue() == Side.SELL_SHORT) curLimits.SentNet -= -curOrderQty.getValue() * curPrice;
                curLimits.SentShares -= Math.Abs(curOrderQty.getValue());

                if (OnReject != null)
                {
                    OnReject(this, new RejectEventArgs(newOrd.OrderID.getValue(), symbol, curPrice, "ORDER REJECTED BY LOCAL LIMIT CONTROL: \r\n [ " + curLimits.MessageError + " ]".ToString()));
                }
            }

            OnOrderUpdate(this, new OrderEventArgs(_symbol.getValue()));

            return _clOrdId.getValue();
        }

        public string replaceOrder(string clOrdID, double newPrice, double newQuantity, int newDisplayShares)//, OrdType newOrdType)
        {
            // ---- Pega Prefixo para proxima ordem
            string _clOrdId = nextClOrderID(SessionFromSenderID(OrderContainer[clOrdID].OrderCompID).getSessionID().getSenderCompID());
            
            curLimits.SentGross += Math.Abs(newQuantity * newPrice);
            if (OrderContainer[clOrdID].Side.getValue() == Side.BUY) curLimits.SentNet += newQuantity * newPrice;
            if (OrderContainer[clOrdID].Side.getValue() == Side.SELL || OrderContainer[clOrdID].Side.getValue() == Side.SELL_SHORT) curLimits.SentNet += -newQuantity * newPrice;
            
            curLimits.SentShares += Math.Abs(newQuantity);
            curLimits.Ticker = OrderContainer[clOrdID].Symbol.ToString(); 
            
            if (curLimits.CanSend() && curLimits.OrderSizeOK(newQuantity, newPrice))
            {
                curLimits.SentGross -= Math.Abs(OrderContainer[clOrdID].OrderQty.getValue() * OrderContainer[clOrdID].Price.getValue());
                if (OrderContainer[clOrdID].Side.getValue() == Side.BUY) curLimits.SentNet -= OrderContainer[clOrdID].OrderQty.getValue() * OrderContainer[clOrdID].Price.getValue();
                if (OrderContainer[clOrdID].Side.getValue() == Side.SELL || OrderContainer[clOrdID].Side.getValue() == Side.SELL_SHORT) curLimits.SentNet -= -OrderContainer[clOrdID].OrderQty.getValue() * OrderContainer[clOrdID].Price.getValue();
                curLimits.SentShares -= Math.Abs(OrderContainer[clOrdID].OrderQty.getValue());

                if (OrderContainer.ContainsKey(clOrdID))
                {
                    HandlInst _handlInst = new HandlInst(HandlInst.AUTOMATED_EXECUTION_ORDER_PRIVATE);
                    OrdType curOrdType = new OrdType();
                    Price _newPrice = new Price();

                    if (newPrice > 0)
                    {
                        curOrdType.setValue(OrdType.LIMIT);
                    }
                    else if (newPrice == -1)
                    {
                        curOrdType.setValue(OrdType.MARKET);
                    }
                    else if (newPrice == -2)
                    {
                        curOrdType = new OrdType(OrdType.ON_CLOSE);
                    }

                    QuickFix42.OrderCancelReplaceRequest ReplaceRequest = new QuickFix42.OrderCancelReplaceRequest(new OrigClOrdID(OrderContainer[clOrdID].ClOrdID.getValue()),
                                                                                                new ClOrdID(_clOrdId),
                                                                                                _handlInst,
                                                                                                OrderContainer[clOrdID].Symbol,
                                                                                                OrderContainer[clOrdID].Side,
                                                                                                new TransactTime(DateTime.Now),
                                                                                                curOrdType);
                    if (_lOrdTypeLimit.Contains(curOrdType.getValue()))
                        ReplaceRequest.set(new Price(newPrice));

                    ReplaceRequest.set(new OrderQty(newQuantity));
                    //if (OrderContainer[clOrdID].OrderQty.getValue() != newQuantity)
                    //    ReplaceRequest.set(new OrderQty(newQuantity));
                    
                    if ( newDisplayShares == -1)
                        newDisplayShares = OrderContainer[clOrdID].DisplayShares;
                    
                    //int curDisplayShares = newDisplayShares;
                    // if ( newDisplayShares > OrderContainer[clOrdID].Leaves )
                    //    newDisplayShares = (int)OrderContainer[clOrdID].Leaves;

                    if (newDisplayShares > ((int)OrderContainer[clOrdID].Leaves + newQuantity ))
                        newDisplayShares = (int)OrderContainer[clOrdID].Leaves;

                    // if (newDisplayShares >= 10000)
                    if (newDisplayShares >= 5000)
                    {
                        ReplaceRequest.setInt(111, newDisplayShares);
                    }

                    ReplaceRequest.setField(OrderContainer[clOrdID].Account);
                    ReplaceRequest.getHeader().setField(OrderContainer[clOrdID].DeliverToCompID);

                    //Session.sendToTarget(ReplaceRequest, RetornarSessionID());
                    Session.sendToTarget(ReplaceRequest, SessionFromSenderID(OrderContainer[clOrdID].OrderCompID).getSessionID());
                    _ReplacesSent++;
                }
            }
            else
            {
                OrderContainer[clOrdID].Status = new OrdStatus(OrdStatus.REJECTED);

                curLimits.SentGross -= Math.Abs(newQuantity * newPrice);
                if (OrderContainer[clOrdID].Side.getValue() == Side.BUY) curLimits.SentNet -= newQuantity * newPrice;
                if (OrderContainer[clOrdID].Side.getValue() == Side.SELL || OrderContainer[clOrdID].Side.getValue() == Side.SELL_SHORT) curLimits.SentNet -= -newQuantity * newPrice;
                curLimits.SentShares -= Math.Abs(newQuantity);

                if (OnReject != null)
                {
                    OnReject(this, new RejectEventArgs(OrderContainer[clOrdID].OrderID.ToString(), OrderContainer[clOrdID].Symbol.ToString(), newPrice, "ORDER REJECTED BY LOCAL LIMIT CONTROL: \r\n [ " + curLimits.MessageError + " ]".ToString()));
                }
            }
            return _clOrdId;
        }

        private string getSymbol(int IdSecurity)
        {
            string SQLExpresion = "SELECT EXCHANGETICKER FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE IDSECURITY = " + IdSecurity.ToString();

            string result = "";

            using (newNestConn conn = new newNestConn())
            {
                if ((result = conn.Execute_Query_String(SQLExpresion)) == "")
                {
                    throw new System.NotImplementedException();
                }
            }

            return result;
        }

        private int getIdSecurity(string Ticker)
        {
            string SQLExpresion = "SELECT IDSECURITY FROM NESTDB.DBO.TB001_SECURITIES (NOLOCK) WHERE EXCHANGETICKER = '" + Ticker + "'";

            int result = 0;

            using (newNestConn conn = new newNestConn())
            {
                result = conn.Return_Int(SQLExpresion);
            }

            return result;
        }

        public void cancelAllOrders()
        {
            MutexOrderContainer.WaitOne();
            foreach (OrderLT ord in OrderContainer.Values)
            {
                if (ord.Status.ToString() != new OrdStatus(OrdStatus.FILLED).ToString() && ord.Status.ToString() != new OrdStatus(OrdStatus.SUSPENDED).ToString())
                {
                    cancelOrder(ord.OrderID.getValue());
                }
            }
            MutexOrderContainer.ReleaseMutex();
        }

        public void cancelAllOrders(int IdSecurity)
        {
            MutexOrderContainer.WaitOne();
            foreach (OrderLT ord in OrderContainer.Values)
            {
                if (ord.IdSecurity == IdSecurity)
                {
                    if (ord.Status.ToString() != new OrdStatus(OrdStatus.FILLED).ToString() && ord.Status.ToString() != new OrdStatus(OrdStatus.SUSPENDED).ToString())
                    {
                        cancelOrder(ord.OrderID.getValue());
                    }
                }
            }
            MutexOrderContainer.ReleaseMutex();
        }

        public bool cancelOrder(string OrderID)
        {
            bool result = false;

            if (OrderContainer.ContainsKey(OrderID))
            {
                QuickFix42.OrderCancelRequest CancelRequest = new QuickFix42.OrderCancelRequest(new OrigClOrdID(OrderContainer[OrderID].ClOrdID.getValue()), 
                                                                                                new ClOrdID( nextClOrderID( SessionFromSenderID(OrderContainer[OrderID].OrderCompID).getSessionID().getSenderCompID() ) ), 
                                                                                                OrderContainer[OrderID].Symbol, 
                                                                                                OrderContainer[OrderID].Side, 
                                                                                                new TransactTime(DateTime.Now)
                                                                                                );
                CancelRequest.set(OrderContainer[OrderID].OrderQty);
                CancelRequest.setField(OrderContainer[OrderID].Account);
                CancelRequest.getHeader().setField(OrderContainer[OrderID].DeliverToCompID);

                Session.sendToTarget(CancelRequest, SessionFromSenderID(OrderContainer[OrderID].OrderCompID).getSessionID());
                result = true;
            }

            return result;
        }

        private string nextClOrderID(string sSenderCompID)
        {
            // return _OrderPrefix + getNextOrdID().ToString("000000");
            if (sSenderCompID.Length > 3)
                _OrderPrefix = sSenderCompID.Substring(sSenderCompID.Length - 3, 3);

            return _OrderPrefix + getNextOrdID().ToString("000000");
        }

        //private void getLastOrdID()
        //{
            //if (DateTime.Today.Equals(NFIXConn.Properties.Settings.Default.LastClOrdIDDate))
            //{
                //ordID = NFIXConn.Properties.Settings.Default.LastClOrdID;
            //}
            //else
            //{
            //    NFIXConn.Properties.Settings.Default.LastClOrdIDDate = DateTime.Today;
            //    ordID = 0;
            //    NFIXConn.Properties.Settings.Default.LastClOrdID = ordID;
            //    NFIXConn.Properties.Settings.Default.Save();
            //}
        //}

        private int getNextOrdID()
        {
            int thisOrdId = 0;
            //if (DateTime.Today.Equals(NFIXConn.Properties.Settings.Default.LastClOrdIDDate))
            //{
                thisOrdId = ordID++;
                //NFIXConn.Properties.Settings.Default.LastClOrdID = ordID;
                //NFIXConn.Properties.Settings.Default.Save();
            //}
            //else
            //{
            //    NFIXConn.Properties.Settings.Default.LastClOrdIDDate = DateTime.Today;
            //    ordID = 1;
            //    thisOrdId = 1;
            //    NFIXConn.Properties.Settings.Default.LastClOrdID = ordID;
            //    NFIXConn.Properties.Settings.Default.Save();
            //}

            return thisOrdId;
        }

        #endregion

        #region Receive Messages

        public override void onMessage(QuickFix42.ExecutionReport message, SessionID session)
        {
            UpdateOrder(message, session);
        }

        public override void onMessage(QuickFix44.ExecutionReport message, SessionID session)
        {
            QuickFix42.ExecutionReport tempMessage = new QuickFix42.ExecutionReport();

            tempMessage.set(message.getClOrdID());
            tempMessage.set(message.getOrderID());
            tempMessage.set(message.getExecType());
            // tempMessage.set(message.getPrice());
            tempMessage.set(message.getOrdStatus());
            tempMessage.set(message.getOrderQty());
            tempMessage.set(message.getCumQty());
            tempMessage.set(message.getLeavesQty());
            tempMessage.set(message.getAvgPx());
            tempMessage.set(message.getSymbol());

            if (message.isSetText()) tempMessage.set(message.getText());
            if (message.isSetExecID())  tempMessage.set(message.getExecID());
            if (message.isSetLastQty()) tempMessage.set(new LastShares(message.getLastQty().getValue()));
            if (message.isSetLastPx())  tempMessage.set(message.getLastPx());
            if (message.isSetPrice())   tempMessage.set(message.getPrice());

            UpdateOrder(tempMessage, session);
        }

        public override void onMessage(QuickFix42.OrderCancelReject message, SessionID session)
        {
            UpdateOrder(message);
        }

        public override void onMessage(QuickFix44.OrderCancelReject message, SessionID session)
        {
            QuickFix42.OrderCancelReject tempMessage = new QuickFix42.OrderCancelReject();

            tempMessage.set(message.getClOrdID());
            tempMessage.set(message.getOrderID());
            
            if (message.isSetText()) tempMessage.set(message.getText());
            
            UpdateOrder(tempMessage);
        }
        
        private void UpdateOrder(QuickFix42.OrderCancelReject message)
        {
            ClOrdID curClOrdID;
            OrderID curOrderID;

            curClOrdID = message.getClOrdID();
            curOrderID = message.getOrderID();

            string strOrderID = curOrderID.getValue();

            MutexOrderContainer.WaitOne();
            if (OrderContainer.ContainsKey(strOrderID))
            {
                if (ReceivedUpdate != null)
                {
                    NCommonTypes.FIXOrder UpdateOrderArgs = new NCommonTypes.FIXOrder(OrderContainer[strOrderID].IdSecurity, OrderContainer[strOrderID].Symbol.getValue(), OrderContainer[strOrderID].strSide, -1, -1);

                    UpdateOrderArgs.ClOrdID = OrderContainer[strOrderID].ClOrdID.getValue();
                    UpdateOrderArgs.OrderID = OrderContainer[strOrderID].OrderID.getValue();

                    UpdateOrderArgs.strStatus = OrderContainer[strOrderID].strStatus;

                    UpdateOrderArgs.Done = (int)OrderContainer[strOrderID].Done;
                    UpdateOrderArgs.Cancelled = 0;

                    UpdateOrderArgs.ExecPrice = OrderContainer[strOrderID].ExecPrice;

                    OnOrderUpdate(this, new OrderEventArgs(OrderContainer[strOrderID].Symbol.getValue().ToString()));
                    ReceivedUpdate(this, UpdateOrderArgs);
                }
            }
            MutexOrderContainer.ReleaseMutex();

            if (OnReject != null)
            {
                OnReject(this, new RejectEventArgs(curClOrdID.getValue(), 0.ToString(), 0, message.getText().ToString()));
            }

        }

        private void UpdateOrder(QuickFix42.ExecutionReport message, SessionID session)
        {
            OrigClOrdID origID = new OrigClOrdID();

            ClOrdID curClOrdID;
            OrderID curOrderID;
            ExecID curExecID = null;
            string receivedOrigClOrdID = "";
            string strOrderID = "";

            curClOrdID = message.getClOrdID();
            curOrderID = message.getOrderID();
            if(message.isSetExecID()) curExecID = message.getExecID();

            if (message.getExecType().getValue() == ExecType.NEW)
            {
                try
                {
                    MutexOrderContainer.WaitOne();
                    OrderLT tempOrderLT = OrderContainer["NEW_" + curClOrdID];
                    tempOrderLT.SetOrderID(curOrderID);
                    OrderContainer.Remove("NEW_" + curClOrdID);
                    OrderContainer.Add(tempOrderLT.OrderID.getValue(), tempOrderLT);
                }
                catch
                {}
                finally
                {
                    MutexOrderContainer.ReleaseMutex();
                }
            }

            if ((message.getExecType().getValue() == ExecType.FILL || message.getExecType().getValue() == ExecType.PARTIAL_FILL))
            {
                _FillsReceived++;
            }

            Price curPrice = new Price(0);

            if(message.isSetPrice())
            {
                curPrice = message.getPrice();
            }

            MutexOrderContainer.WaitOne();

            strOrderID = curOrderID.getValue();
            
            if (message.getExecType().getValue() == ExecType.REJECTED)
            {
                if (!OrderContainer.ContainsKey(strOrderID))
                {
                    strOrderID = "NEW_" + curClOrdID;
                }
            }

            if (OrderContainer.ContainsKey(strOrderID))
            {
                OrderContainer[strOrderID].ChangeStatus(message.getOrdStatus());

                if (OrderContainer[strOrderID].Status.getValue() == OrdStatus.NEW || OrderContainer[strOrderID].Status.getValue() == OrdStatus.REJECTED)
                {
                    if(OrderContainer[strOrderID].TimeToAck==0) 
                        OrderContainer[strOrderID].TimeToAck = MasterClock.ElapsedMilliseconds-OrderContainer[strOrderID].SentTick;
                }

                OrderContainer[strOrderID].ClOrdID = curClOrdID;
                OrderContainer[strOrderID].Price = curPrice;
                OrderContainer[strOrderID].OrderQty = message.getOrderQty();
                OrderContainer[strOrderID].Done = message.getCumQty().getValue();
                OrderContainer[strOrderID].Leaves = message.getLeavesQty().getValue();
                OrderContainer[strOrderID].ExecPrice = message.getAvgPx().getValue();
                OrderContainer[strOrderID].BrokerOrderID = message.getOrderID().getValue();
                //OrderContainer[strOrderID].OrderCompID = message.getHeader().getField(49) new TargetCompID();
                OrderContainer[strOrderID].Updated = true;

                ReportUpdate(strOrderID);

                if (message.getExecType().getValue() == ExecType.FILL || message.getExecType().getValue() == ExecType.PARTIAL_FILL || message.getExecType().getValue() == ExecType.TRADE)
                {
                    MutexExecContainer.WaitOne();

                    if (ExecContainer.ContainsKey(message.getExecID().getValue()))
                    {

                    } 
                    else
                    {
                        ExecLT curExecLT = new ExecLT();
                        curExecLT.ExecID = message.getExecID().getValue();
                        curExecLT.OrderID = new OrderID(strOrderID);
                        curExecLT.LastShares = message.getLastShares().getValue();
                        curExecLT.LastPrice = message.getLastPx().getValue();
                        curExecLT.Inserted = false;

                        ExecContainer.Add(message.getExecID().getValue(), curExecLT);
                    }

                    MutexExecContainer.ReleaseMutex();
                }
            }
            else
            {
                Console.WriteLine("============= FIX ORDER NOT FOUND ==============");
                Console.WriteLine("validClOrdID  " + strOrderID);
                Console.WriteLine("============= FIX ORDER NOT FOUND ==============");
                Console.WriteLine("curClOrdID  " + curClOrdID);
                Console.WriteLine("receivedOrigClOrdID  " + receivedOrigClOrdID);
            }

            MutexOrderContainer.ReleaseMutex();

            if (OnReject != null && message.getExecType().getValue() == ExecType.REJECTED)
            {
                double rejPrice = 0;
                if (message.isSetPrice()) rejPrice = message.getPrice().getValue();

                OnReject(this, new RejectEventArgs(curClOrdID.getValue(), message.getSymbol().ToString(), rejPrice, message.getText().ToString()));
            }

            if (OnOrderUpdate != null)
            {
                OnOrderUpdate(this, new OrderEventArgs(message.getSymbol().ToString()));
            }
        }

        private void ReportUpdate(string OrderID)
        {
            if (ReceivedUpdate != null)
            {
                NCommonTypes.FIXOrder UpdateOrderArgs = new NCommonTypes.FIXOrder(OrderContainer[OrderID].IdSecurity, 
                                                                                OrderContainer[OrderID].Symbol.getValue(),
                                                                                OrderContainer[OrderID].strSide,
                                                                                (int)OrderContainer[OrderID].OrderQty.getValue(),
                                                                                OrderContainer[OrderID].Price.getValue()
                                                                                );

                UpdateOrderArgs.ClOrdID = OrderContainer[OrderID].ClOrdID.getValue();
                UpdateOrderArgs.OrderID = OrderContainer[OrderID].OrderID.getValue();

                UpdateOrderArgs.strStatus = OrderContainer[OrderID].strStatus;

                UpdateOrderArgs.Done = (int)OrderContainer[OrderID].Done;
                UpdateOrderArgs.Cancelled = 0;

                UpdateOrderArgs.ExecPrice = OrderContainer[OrderID].ExecPrice;

                ReceivedUpdate(this, UpdateOrderArgs);
            }
        }

        #endregion

        #region QuickFix Events
        /// <summary>
        /// Called on FIX session creation
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onCreate(SessionID sessionID)
        {
            _ID_Session = sessionID;
        }

        /// <summary>
        /// Called on successful logon
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onLogon(SessionID sessionID)
        {
            _IsAliveSession = true;
            //string curSenderId =sessionID.getSenderCompID();
            //if (curSenderId.Length > 3)
            //{
            //    _OrderPrefix = curSenderId.Substring(curSenderId.Length - 3, 3);
            //}
            //else
            //{
            //    throw new System.NotImplementedException();
            //}

            arrSessions = _initiator.getSessions();
        }

        /// <summary>
        /// Called when connection ends
        /// </summary>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void onLogout(SessionID sessionID)
        {
            _IsAliveSession = false;
        }

        /// <summary>
        /// Called before the application sends a session message
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void toAdmin(Message message, SessionID sessionID)
        {
        }

        /// <summary>
        /// Called when a session message is received
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void fromAdmin(Message message, SessionID sessionID)
        {
            crack(message, sessionID);
        }

        /// <summary>
        /// Called before the application sends an application message
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void toApp(Message message, SessionID sessionID)
        {
            //SenderSubID _senderSubId = new SenderSubID("UA");

            //if (!message.isSetField(_senderSubId)) { message.setField(_senderSubId); }
        }

        /// <summary>
        /// Called when an application message is received
        /// </summary>
        /// <param name="message">FIX message</param>
        /// <param name="sessionID">Identifies uniquely the session</param>
        public void fromApp(Message message, SessionID sessionID)
        {
            try
            {
                crack(message, sessionID);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                Console.WriteLine(message.ToXML());
            }
        }
        #endregion

        #region Disposable Region

        /// <summary>
        /// Disposes FIX class
        /// </summary>
        public void Dispose()
        {
            _initiator.stop();
        }//Dispose



        #endregion

    }//FixConn

    public class ExecLT
    {
        public ExecLT()
        { 
        }

        public ExecLT getCopy()
        {
            ExecLT tempExecLT = (ExecLT)this.MemberwiseClone();

            if (this.OrderID != null) tempExecLT.OrderID = new OrderID(this.OrderID.getValue());

            return tempExecLT;
        }

        private string _ExecID; public string ExecID { get { return _ExecID; } set { _ExecID = value; } }
        private OrderID _curOrderID; public OrderID OrderID { get { return _curOrderID; } set { _curOrderID = value; } }
        private double _LastShares; public double LastShares { get { return _LastShares; } set { _LastShares = value; } }
        private double _LastPrice; public double LastPrice { get { return _LastPrice; } set { _LastPrice = value; } }

        private bool _Inserted; public bool Inserted { get { return _Inserted; } set { _Inserted = value; } }
        private string _DatabaseID = ""; public string DatabaseID { get { return _DatabaseID; } set { _DatabaseID = value; } }
    }

    public class OrderLT
    {
        public OrderLT getCopy()
        {
            OrderLT tempOrderLT = (OrderLT)this.MemberwiseClone();

            if (this.Account != null) tempOrderLT.Account = new Account(this.Account.getValue());
            if (this.OrderID != null) tempOrderLT.OrderID = new OrderID(this.OrderID.getValue());
            if (this.ClOrdID != null) tempOrderLT.ClOrdID = new ClOrdID(this.ClOrdID.getValue());
            if (this.Symbol != null)             tempOrderLT.Symbol = new Symbol(this.Symbol.getValue());
            if (this.OrderCompID != null) tempOrderLT.OrderCompID = this.OrderCompID;
            if (this.Side != null) tempOrderLT.Side = new Side(this.Side.getValue());
            if (this.OrderQty != null) tempOrderLT.OrderQty = new OrderQty(this.OrderQty.getValue());
            if (this.Status != null) tempOrderLT.Status = new OrdStatus(this.Status.getValue());
            if (this.Price != null) tempOrderLT.Price = new Price(this.Price.getValue());
            if (this.SentTime != null) tempOrderLT.SentTime = this.SentTime;
            if (this.DeliverToCompID != null) tempOrderLT.DeliverToCompID = new DeliverToCompID(this.DeliverToCompID.getValue());

            return tempOrderLT;
        }

        private Account _Account;public Account Account { get { return _Account; } set { _Account = value; } }
        private OrigClOrdID _zOrigClOrdID; public OrigClOrdID zOrigClOrdID { get { return _zOrigClOrdID; } }
        private OrderID _OrderID; public OrderID OrderID { get { return _OrderID; } set { _OrderID = value; } }
        private ClOrdID _ClOrdID;public ClOrdID ClOrdID { get { return _ClOrdID; } set { _ClOrdID = value; } }
        private Symbol _Symbol; public Symbol Symbol { get { return _Symbol; } set { _Symbol = value; } }
        private string _OrderCompID; public string OrderCompID { get { return _OrderCompID; } set { _OrderCompID = value; } }

        private Side _Side;public Side Side { get { return _Side; } set { _Side = value; } }
        private OrderQty _OrderQty;public OrderQty OrderQty { get { return _OrderQty; } set { _OrderQty = value; } }
        private OrdStatus _Status;public OrdStatus Status { get { return _Status; } set { _Status = value; } }
        private Price _Price;public Price Price { get { return _Price; } set { _Price = value; } }
        private TimeSpan _SentTime; public TimeSpan SentTime { get { return _SentTime; } set { _SentTime = value; } }
        private DeliverToCompID _DeliverToCompID; public DeliverToCompID DeliverToCompID { get { return _DeliverToCompID; } set { _DeliverToCompID = value; } }
        
        private int _IdSecurity;public int IdSecurity { get { return _IdSecurity; } }
        private double _Done;public double Done { get { return _Done; } set { _Done = value; } }
        private double _ExecPrice;public double ExecPrice { get { return _ExecPrice; } set { _ExecPrice = value; } }
        private double _Leaves;public double Leaves { get { return _Leaves; } set { _Leaves = value; } }
        private double _TimeToAck;public double TimeToAck { get { return _TimeToAck; } set { _TimeToAck = value; } }
        private double _SentTick;public double SentTick { get { return _SentTick; } set { _SentTick = value; } }
        private string _Fund = "";public string Fund { get { return _Fund; } set { _Fund = value; } }
        private string _BrokerOrderID = "";public string BrokerOrderID { get { return _BrokerOrderID; } set { _BrokerOrderID = value; } }
        private int _DisplayShares = 0;public int DisplayShares { get { return _DisplayShares; } set { _DisplayShares = value; } }

        private bool _Inserted = false; public bool Inserted { get { return _Inserted; } set { _Inserted = value; } }
        private string _DatabaseID = ""; public string DatabaseID { get { return _DatabaseID; } set { _DatabaseID = value; } }
        private bool _Updated = false; public bool Updated { get { return _Updated; } set { _Updated = value; } }

        private int _IdPortfolio = 0; public int IdPortfolio { get { return _IdPortfolio; } set { _IdPortfolio = value; } }
        private int _IdBook = 0; public int IdBook { get { return _IdBook; } set { _IdBook = value; } }
        private int _IdSection = 0; public int IdSection { get { return _IdSection; } set { _IdSection = value; } }
        public string _Book = ""; public string Book { get { return _Book; } set { _Book = value; } }
        public string _Section = ""; public string Section { get { return _Section; } set { _Section = value; } }

        public string strStatus { get { return ConvertStatus(_Status.getValue()); } }
        public string strSide { get { return ConvertSide(_Side.getValue()); } }
        public string strAccount { get { return _Account.getValue(); } }
        public double dblPrice { get { return _Price.getValue(); } }
        public double dblOrderQty { get { return _OrderQty.getValue(); } }

        public string strSymbol { get { return _Symbol.getValue(); } }
        public string strClOrdID { get { return _ClOrdID.getValue(); } }
        public string strOrderID { get { return OrderID.getValue(); } }
        public double NetDone { get { return _Done * SideSignal(_Side.getValue()); } }
        public string strDeliverToCompID { get { return DeliverToCompID.ToString(); } }
        public double Buy { get { if (NetDone > 0)return _Done; else return 0; } }
        public double Sell { get { if (NetDone < 0)return _Done; else return 0; } }
        public double BuyPrice { get { if (NetDone > 0)return ExecPrice; else return 0; } }
        public double SellPrice { get { if (NetDone < 0)return ExecPrice; else return 0; } }

        private CumQty _CumQty;

        public OrderLT(ClOrdID clOrdID, int IdSecurity, Symbol symbol, Side side, OrderQty orderQty, Price price, string OrderCompID)
        {
            _ClOrdID = clOrdID;
            _IdSecurity = IdSecurity;
            _Symbol = symbol;
            _OrderCompID = OrderCompID;
            _Side = side;
            _OrderQty = orderQty;
            _Price = price;

            _OrderID = new OrderID("NEW_" + clOrdID.getValue());
            _CumQty = new CumQty(0);
            _Status = new OrdStatus(OrdStatus.PENDING_NEW);
        }

        public void SetOrderID(OrderID curOrderID)
        {
            this.OrderID = curOrderID;
        }

        public void FillOrder(OrderID curOrderID, LastShares lastShares, CumQty cumQty)
        {
            if (curOrderID.getValue() == OrderID.getValue())
            {
                _CumQty.setValue(_CumQty.getValue() + lastShares.getValue());
                if (_CumQty.getValue() != cumQty.getValue())
                {
                    Console.WriteLine("Last shares do not fill Order to the expected CumQty. Received: " + cumQty.ToString() + " Expected: " + _CumQty.ToString());
                }
            }
            else
            {
                throw new Exception("Incorrect ClOrdID on order fill. Received: " + curOrderID.ToString() + " Expected: " + ClOrdID.ToString());
            }
        }
        public void ChangeStatus(OrdStatus ordStatus)
        {
            Status = ordStatus;
        }

        private string ConvertStatus(char curStatus)
        {
            switch (curStatus)
            {
                case 'D': return "ACCEPTED_FOR_BIDDING"; break;
                case 'B': return "CALCULATED"; break;
                case '4': return "CANCELED"; break;
                case '3': return "DONE_FOR_DAY"; break;
                case 'C': return "EXPIRED"; break;
                case '2': return "FILLED"; break;
                case '0': return "NEW"; break;
                case '1': return "PARTIALLY_FILLED"; break;
                case '6': return "PENDING_CANCEL"; break;
                case 'A': return "PENDING_NEW"; break;
                case 'E': return "PENDING_REPLACE"; break;
                case '8': return "REJECTED"; break;
                case '5': return "REPLACED"; break;
                case '7': return "STOPPED"; break;
                case '9': return "SUSPENDED"; break;
                default: return "UNKNOWN";
            }
        }
        private string ConvertSide(char curSide)
        {
            switch (curSide)
            {
                case 'B': return "AS_DEFINED";
                case 'G': return "BORROW";
                case '1': return "BUY";
                case '3': return "BUY_MINUS";
                case '8': return "CROSS";
                case '9': return "CROSS_SHORT";
                case 'A': return "CROSS_SHORT_EXEMPT";
                case 'F': return "LEND";
                case 'C': return "OPPOSITE";
                case 'E': return "REDEEM";
                case '2': return "SELL";
                case '4': return "SELL_PLUS";
                case '5': return "SELL_SHORT";
                case '6': return "SELL_SHORT_EXEMPT";
                case 'D': return "SUBSCRIBE";
                case '7': return "UNDISCLOSED";
                default: return "UNKNOWN";
            }
        }
        private int SideSignal(char curSide)
        {
            switch (curSide)
            {
                case 'B': return 0;
                case 'G': return 0;
                case '1': return 1;
                case '3': return 1;
                case '8': return 0;
                case '9': return 0;
                case 'A': return 0;
                case 'F': return 0;
                case 'C': return 0;
                case 'E': return 0;
                case '2': return -1;
                case '4': return -1;
                case '5': return -1;
                case '6': return -1;
                case 'D': return 0;
                case '7': return 0;
                default: return 0;
            }
        }
    }
    
    public class LimitControl
    {
        public double MaxTotalGross = 0;
        public double MaxTotalNet = 0;
        public double MaxTotalShares = 0;

        public double MaxOrderAmount = 0;
        public double MaxOrderShares = 0;

        public double MaxContractsDI1 = 0;
        public double MaxContractsIND = 0;
        public double MaxContractsDOL = 0;

        public double SentGross = 0;
        public double SentNet = 0;
        public double SentShares = 0;

        public bool OrderSendBlocked = false;
        public string Ticker = "";
        public string MessageError = "";

        public bool CanSend()
        {
            bool tempReturn = true;
            MessageError = "";

            if (SentGross > MaxTotalGross)       { MessageError = " SentGross (" + SentGross.ToString() + ") > MaxTotalGross  (" + MaxTotalGross.ToString() + ")"; tempReturn = false; }
            if (Math.Abs(SentNet) > MaxTotalNet) { MessageError = " SentNet (" + SentNet.ToString() + ") > MaxTotalNet (" + MaxTotalNet.ToString() + ")"; tempReturn = false; }
            if (SentShares > MaxTotalShares)     { MessageError = " SentShares (" + SentShares.ToString() + ") > MaxTotalShares (" + MaxTotalShares.ToString() + ")"; tempReturn = false; }

            if (tempReturn == false)
            {
                Console.WriteLine("========== ORDER NOT SENT BECAUSE OF GLOBAL LIMIT CONTROL (CanSend)========= ");
            }

            if (OrderSendBlocked) tempReturn = false;

            if (tempReturn == false) Console.WriteLine("========== ORDER NOT SENT BECAUSE OF GLOBAL LIMIT CONTROL - ORDERSENDBLOCKED = TRUE (CanSend)========= ");
   
            return tempReturn;
        }

        public bool OrderSizeOK(double Quantity, double Price)
        {
            MessageError = "";
            bool tempReturn = true;

            if (Ticker.Contains("DOL"))
            {
                if (Quantity > MaxContractsDOL) { MessageError = " Quantity (" + Quantity.ToString() + ") > MaxContractsDOL (" + MaxContractsDOL.ToString()+")"; tempReturn = false; }
            }
            else if (Ticker.Contains("DI1"))
            {
                if (Quantity > MaxContractsDI1) { MessageError = " Quantity (" + Quantity.ToString() + ") > MaxContractsDI1 (" + MaxContractsDI1.ToString() + ")"; tempReturn = false; }
            }

            else if (Ticker.Contains("IND"))
            {
                if (Quantity > MaxContractsIND) { MessageError = " Quantity (" + Quantity.ToString() + ") > MaxContractsIND (" + MaxContractsIND.ToString() + ")"; tempReturn = false; }
            }
            else
            {
                if (Quantity * Price > MaxOrderAmount) { MessageError = " Quantity * Price > (" + MaxOrderAmount.ToString() + ")"; tempReturn = false; }
                if (Quantity > MaxOrderShares) { MessageError = " Quantity (" + Quantity.ToString() + ") > MaxOrderShares (" + MaxOrderShares.ToString() + ")"; tempReturn = false; }
            }

            if (tempReturn == false) Console.WriteLine("========== ORDER NOT SENT BECAUSE OF ORDER LIMIT CONTROL (OrderSizeOK)========= " + Quantity + " === " + Price);
            return tempReturn;
        }
    }

    public class OrderEventArgs : EventArgs
    {
        private string _Ticker; public string Ticker { get { return _Ticker; } set { _Ticker = value; } }

        public OrderEventArgs(string __Ticker)
        {
            _Ticker = __Ticker;
        }
    }

    public class RejectEventArgs : EventArgs
    {
        private string _IdOrder; public string IdOrder { get { return _IdOrder; } set { _IdOrder = value; } }
        private string _Symbol; public string Symbol { get { return _Symbol; } set { _Symbol = value; } }
        private double _Price; public double Price { get { return _Price; } set { _Price = value; } }
        private string _Reason; public string Reason { get { return _Reason; } set { _Reason = value; } }

        public RejectEventArgs(string __IdOrder, string __Symbol, double __Price, string __Reason)
        {
            _IdOrder = __IdOrder;
            _Symbol = __Symbol;
            _Price = __Price;
            _Reason = __Reason;
        }
    }
}
